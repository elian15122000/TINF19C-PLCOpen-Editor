{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/position/placement.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/throttle.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/position/position.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection-registery.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/charts/chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/visibility-observer.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/base-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/axis-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/trim-label.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/ticks.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis-ticks.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/shape.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis-ticks.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/style.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/alignment.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/show.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/axes.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.directive.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/label.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/id.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/circle-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/circle.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-panel.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-panel-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/svg-linear-gradient.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/svg-radial-gradient.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/area.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/count/count.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/events.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/count/count.directive.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip-area.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/timeline/timeline.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/legend-entry.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/scale-legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/advanced-legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/chart-common.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/view-dimensions.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/color-sets.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/color.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/domain.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/sort.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-2d.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-2d.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-vertical.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-horizontal.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.utils.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/types.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/advanced-pie-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-arc.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-layout.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/card.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/color-utils.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/card-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/linear-gauge.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-arc.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/ngx-charts.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polyfills.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tick-format.helper.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","PlacementTypes","InjectionService","applicationRef","componentFactoryResolver","injector","setGlobalRootViewContainer","container","globalRootViewContainer","getRootViewContainer","_container","components","Error","setRootViewContainer","getComponentRootNode","component","element","nativeElement","hostView","rootNodes","location","getRootViewContainerNode","projectComponentBindings","bindings","undefined","inputs","bindingKeys","getOwnPropertyNames","bindingKeys_1","bindingKeys_1_1","bindingName","instance","outputs","eventKeys","eventKeys_1","eventKeys_1_1","eventName","appendComponent","componentClass","appendLocation","portalHost","DomPortalHost","portal","ComponentPortal","componentRef","attach","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","apply","now","remaining","clearTimeout","trailing","setTimeout","throttleable","duration","target","key","descriptor","configurable","enumerable","get","defineProperty","Injectable","ApplicationRef","ComponentFactoryResolver","Injector","verticalPosition","elDimensions","popoverDimensions","alignment","top","height","horizontalPosition","left","width","PositionHelper","calculateVerticalAlignment","window","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","right","bottom","positionContent","determinePlacement","TooltipContentComponent","renderer","clz","type","cssClass","ngAfterViewInit","position","bind","_this","nativeElm","host","getBoundingClientRect","checkFlip","showCaret","addClass","_a","setStyle","caretElm","onWindowResize","Component","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","Input","ViewChild","HostBinding","HostListener","decorators","desc","c","getOwnPropertyDescriptor","Reflect","decorate","__decorate","InjectionRegisteryService","injectionService","defaults","Map","getByType","createByType","assignDefaults","injectComponent","register","destroy","compsByType","componentType","idx","indexOf","splice","destroyAll","destroyByType","comps","assign","has","set","TooltipService","_super","ChartComponent","showLegend","animations","legendLabelClick","EventEmitter","legendLabelActivate","legendLabelDeactivate","ngOnChanges","changes","update","legendColumns","legendType","getLegendType","legendOptions","chartColumns","chartWidth","Math","floor","view","legendWidth","scaleType","providers","changeDetection","ChangeDetectionStrategy","OnPush","trigger","transition","style","opacity","animate","Output","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","emit","check","offsetHeight","offsetWidth","runOutsideAngular","Directive","NgZone","BaseChartComponent","chartElement","cd","scheme","schemeType","select","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","markForCheck","hostElem","parentNode","formatDates","g","label","name","toLocaleDateString","series","j","resizeSubscription","subscription","observableFromEvent","pipe","debounceTime","data","data_1","data_1_1","item","copy","_c","e_2","_d","seriesItem","seriesItemCopy","JSON","parse","stringify","ChangeDetectorRef","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","transform","orient","y","offset","x","trimLabel","max","trim","slice","reduceTicks","ticks","maxTicks","reduced","modulus","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","maxTicksLength","maxAllowedLength","updateDims","parseInt","ticksElement","scale","getTicks","tickFormatting","tickFormat","toLocaleString","angle","getRotationAngle","adjustedScale","bandwidth","textTransform","tick","toString","tickLength","tickTrim","wordWidth","min","baseWidth","maxBaseWidth","cos","PI","getMaxTicks","maxScaleTicks","tickValues","domain","tickWidth","tickTransform","gridLineTransform","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","fill","stroke","padding","xAxisTickCount","emitTicksHeight","newLabelOffset","roundedRect","w","h","_b","tl","tr","bl","br","retval","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","sign","tickSpacing","referenceLines","setReferencelines","y2","y1","dy","x2","x1","refMin","map","refMax","referenceAreaPath","gridLineWidth","tickHeight","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","StyleTypes","AlignmentTypes","ShowTypes","NgModule","imports","CommonModule","declarations","exports","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipTitle","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","center","tooltipType","popover","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","all","tooltipImmediateExit","show","hide","focus","mouseover","hideTooltip","onFocus","listensForFocus","showTooltip","onBlur","onMouseEnter","listensForHover","onMouseLeave","contains","onMouseClick","immediate","time","createBoundOptions","addHideListeners","tooltip","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","document","event","destroyFn","title","tooltipTemplate","tooltipContext","ViewContainerRef","formatLabel","escapeLabel","replace","match","&","'","`","\"","<",">","entryComponents","cache","id","newId","random","pow","CircleSeriesComponent","activate","deactivate","barVisible","ngOnInit","gradientId","gradientFill","circle","getActiveCircle","indexActiveDataPoint","findIndex","visibleValue","mapDataPointToCircle","cx","seriesName","tooltipLabel","xScale","Number","color","cy","yScale","d1","range","colors","getColor","classNames","radius","gradientStops","getGradientStops","getTooltipText","getTooltipMinMaxText","onClick","isActive","entry","activeEntries","find","activateCircle","deactivateCircle","CircleComponent","isArray","join","GridPanelSeriesComponent","gridPanels","getGridPanels","className","step","paddingInner","class","SvgLinearGradientComponent","orientation","SvgRadialGradientComponent","endOpacity","stopsInput","stopsDefault","startOpacity","AreaComponent","gradient","initialized","hasGradient","loadAnimation","stops","getGradient","updatePathEl","areaPath","startingPath","node","attr","path","easeOutExpo","t","count","countFrom","countTo","countDecimals","countDuration","callback","startTime","startVal","endVal","countDown","decimals","dec","requestAnimationFrame","timestamp","runCount","frameVal","progress","round","finished","val","decimalChecker","abs","root","CountUpDirective","countPrefix","countSuffix","countChange","countFinish","_countDecimals","_countTo","_countFrom","parseFloat","start","cancelAnimationFrame","animationReq","valueFormatting","global","MouseEvent","createMouseEvent","bubbles","cancelable","createEvent","initEvent","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","group","groupName","d0","toFixed","v","mouseMove","xPos","pageX","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","dispatchEvent","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","getToolTipText","tooltipItem","static","Timeline","onDomainChange","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","filter","values","_e","_f","includes","scaleTime","scaleLinear","scalePoint","brushX","extent","on","newDomain","d3event","selection","invert","LegendComponent","horizontal","labelClick","labelActivate","labelDeactivate","legendEntries","getLegendEntries","items","formattedLabel","this_1","trackBy","index","LegendEntryComponent","toggle","ScaleLegendComponent","sanitizer","gradientValues","gradientString","direction","bypassSecurityTrustStyle","splits","pairs","reverse","forEach","DomSanitizer","AdvancedLegendComponent","legendItems","labelFormatting","percentageFormatting","percentage","defaultValueFormatting","getTotal","reduce","sum","total","roundedTotal","getLegendItems","_value","displayLabel","origialLabel","COMPONENTS","GridPanelComponent","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","_g","showYLabel","_h","_j","_k","legendPosition","_l","columns","xOffset","chartHeight","AxesModule","TooltipModule","colorSets","selectable","ColorHelper","customColors","cs","colorDomain","generateColorScheme","colorScale","scaleQuantile","scaleOrdinal","points","valueScale","formattedValue_1","found","mapping","toLowerCase","getLinearGradientStops","colorValueScale","scaleBand","endColor","startColor","currentVal","originalOffset","stops_1","stops_1_1","getUniqueXDomainValues","valueSet","Set","results_1","results_1_1","add","from","getScaleType","checkDateType","every","AreaChartComponent","legendTitle","baseValue","curve","curveLinear","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","roundDomains","timelineHeight","timelinePadding","xAxis","yAxis","showXAxisLabel","showYAxisLabel","legend","timeline","filteredDomain","yDomain","getYDomain","seriesDomain","getSeriesDomain","getYScale","updateTimeline","setColors","getLegendOptions","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","xScaleMin","xScaleMax","sort","a","aDate","getTime","bDate","autoScale","yScaleMin","yScaleMax","nice","date","num","values_1","values_1_1","isDate","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","opts","updateYAxisWidth","updateXAxisHeight","onActivate","entries","onDeactivate","ContentChild","AreaChartNormalizedComponent","e_1","valueOf","AreaChartStackedComponent","this_2","sortLinear","property","sortByDomain","aVal","bVal","aIdx","bIdx","sortByTime","AreaSeriesComponent","stacked","normalized","currentArea","startingArea","updateGradient","xProperty","area","y0","d0values","d1values","isInactive","ChartCommonModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","BarHorizontalComponent","barPadding","showDataLabel","dataLabelMaxWidth","negative","positive","rangeRound","onDataLabelMaxWidthChanged","size","fromLegend","BarHorizontal2DComponent","groupPadding","groupDomain","getGroupDomain","innerDomain","getInnerDomain","valuesDomain","getValueDomain","groupScale","getGroupScale","innerScale","getInnerScale","getValueScale","paddingOuter","e_3","e_5","groupTransform","groupIndex","flat","BarHorizontalNormalizedComponent","valueDomain","BarHorizontalStackedComponent","smallest","biggest","smallestSum","biggestSum","BarVerticalComponent","dataLabelMaxHeight","yAxisTicks","some","isNaN","onDataLabelMaxHeightChanged","BarVertical2DComponent","BarVerticalNormalizedComponent","D0Types","BarVerticalStackedComponent","SeriesVerticalComponent","dataLabelHeightChanged","barsForDataLabels","updateTooltipSettings","d0Type","bars","getLabel","bar","offset1","offset0","ariaLabel","tooltipText","dataLabelFormatting","updateDataLabels","section","totalPositive","totalNegative","dataItem","trackDataLabelBy","barLabel","SeriesHorizontal","dataLabelWidthChanged","click","BarLabelComponent","horizontalPadding","verticalPadding","getSize","formatedValue","barX","barWidth","barY","barHeight","getDomain","minVal","maxVal","getScale","BubbleChartComponent","maxRadius","minRadius","bubblePadding","rDomain","getRDomain","rScale","getRScale","setScales","getBubblePadding","yMin","xMin","yMax","xMax","xScaleType","yScaleType","e_4","e_6","Infinity","e_8","BubbleSeriesComponent","circles","getCircles","hasRadius","hasTooltipLabel","hasSeriesName","radiusValue","xAxisLabel","yAxisLabel","HeatMapCellComponent","gradientUrl","animateToCurrentForm","HeatCellSeriesComponent","cells","getCells","row","cell","HeatMapComponent","innerPadding","rects","getRects","getDimension","N","L","split","f","yVal","rx","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineChartComponent","hasRange","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","getRangeGenerator","outerPath","line","areaGradientStops","twoPI","PolarChartComponent","curveCardinalClosed","rangeFillOpacity","showSeriesOnHover","yAxisMinScale","labelTrim","labelTrimSize","setDims","setTicks","halfWidth","halfHeight","outerRadius","yOffset","yAxisDims","transformYAxis","transformPlot","xValues","getXValues","yAxisScale","xAxisTickFormatting","thetaTicks","startAngle","dd","startPos","sin","innerRadius","endAngle","pos","radiusTicks","getYValues","PolarSeriesComponent","circleRadius","linearScaleType","seriesColor","getAngle","active","inactive","defaultTooltipText","lineRadial","AdvancedPieChartComponent","PieLabelComponent","isIE","test","navigator","userAgent","startRadius","explodeSlices","innerPos","arc","centroid","outerPos","textX","textY","midAngle","PieArcComponent","cornerRadius","pointerEvents","dblclick","getPointerEvents","calc","calculateArc","radialGradientId","updateAnimation","selectAll","attrTween","_current","copyOfD","interpolater","interpolate","_timeout","onDblClick","preventDefault","stopPropagation","nativeEvent","PieChartComponent","labels","doughnut","arcWidth","trimLabels","maxLabelLength","hasNoOptionalMarginsSet","translation","gridSize","len","minWidth","rows","cols","ceil","gridLayout","designatedTotal","res","cardWidth","cardHeight","extra","percent","PieGridComponent","getSeries","format","other","PieGridSeriesComponent","layout","pie","arcs","getArcs","PieSeriesComponent","arcData","pieGenerator","calculateLabelPositions","outerArc","pieData","labelPositions","labelVisible","myArc","showLabels","getTooltipTitle","labelText","PieChartModule","LineChartModule","CardComponent","textFontSize","bandHeight","textPadding","labelFontSize","hasValue","card","textWidth","cardData","transformBand","paddedValue","setPadding","bandPath","scaleText","startCount","medianSize","repeat","val_1","decs","valueFormatting_1","textEl","availableWidth","availableHeight","resizeScale","invertColor","d3_color.rgb","shadeRGBColor","CardSeriesComponent","emptyColor","sortedLengths","cards","getCards","emptySlots","yPadding","xPadding","valueColor","cardColor","bandColor","textColor","NumberCardComponent","observers","TreeMapCellComponent","cellData","formattedValue","getTextColor","TreeMapCellSeriesComponent","children","depth","x0","valueType","TreeMapComponent","treemap","stratify","parentId","isRoot","LinearGaugeComponent","valueResizeScale","unitsResizeScale","valueTextTransform","valueTranslate","unitsTextTransform","unitsTranslate","hasPreviousValue","previousValue","displayValue","getDisplayValue","transformLine","el","valueTextEl","unitsTextEl","oldScale","resizeScaleWidth","resizeScaleHeight","GaugeComponent","bigSegments","smallSegments","showAxis","angleSpan","showText","rotation","availableRadius","radiusPerArc","textRadius","backgroundArc","valueArc","dataMin","dataMax","textValue","availableSpace","GaugeArcComponent","GaugeAxisComponent","rotate","rotationAngle","bigTickSegment","smallTickSegment","big","small","startDistance","textDist","angleDeg","getTextAnchor","skip","text","getTickPath","smallAngle","lineGenerator","BarChartModule","SVGElement","HTMLDivElement","AreaChartModule","BubbleChartModule","HeatMapModule","PolarChartModule","NumberCardModule","TreeMapModule","GaugeModule","fieldType","groupByType","timeFormat","formatter"],"mappings":"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A,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,OACN0b,YAAY,EACZlH,MAAO,UACPrP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,OACN0b,YAAY,EACZlH,MAAO,UACPrP,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAExF,CACEnF,KAAM,QACN0b,YAAY,EACZlH,MAAO,aACPrP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,MACN0b,YAAY,EACZlH,MAAO,aACPrP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,OACN0b,YAAY,EACZlH,MAAO,aACPrP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,QACN0b,YAAY,EACZlH,MAAO,UACPrP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,QACN0b,YAAY,EACZlH,MAAO,UACPrP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,SACN0b,YAAY,EACZlH,MAAO,UACPrP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,UACN0b,YAAY,EACZlH,MAAO,UACPrP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,QACN0b,YAAY,EACZlH,MAAO,UACPrP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,SACN0b,YAAY,EACZlH,MAAO,UACPrP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,QACN0b,YAAY,EACZlH,MAAO,UACPrP,OAAQ,C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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum PlacementTypes {\n  top = 'top' as any,\n  bottom = 'bottom' as any,\n  left = 'left' as any,\n  right = 'right' as any\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n  EmbeddedViewRef,\n  Type\n} from '@angular/core';\nimport { DomPortalHost, ComponentPortal } from '@angular/cdk/portal';\n\nfunction isViewContainerRef(x: any): x is ViewContainerRef {\n  return x.element;\n}\n\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\n@Injectable()\nexport class InjectionService {\n  static globalRootViewContainer: ViewContainerRef = null;\n\n  /**\n   * Sets a default global root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   */\n  static setGlobalRootViewContainer(container: ViewContainerRef): void {\n    InjectionService.globalRootViewContainer = container;\n  }\n\n  private _container: ViewContainerRef;\n\n  constructor(\n    private applicationRef: ApplicationRef,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector\n  ) {}\n\n  /**\n   * Gets the root view container to inject the component to.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainer(): ViewContainerRef | ComponentRef<any> {\n    if (this._container) return this._container;\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\n\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\n\n    throw new Error(\n      'View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.'\n    );\n  }\n\n  /**\n   * Overrides the default root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   *\n   * @memberOf InjectionService\n   */\n  setRootViewContainer(container: ViewContainerRef): void {\n    this._container = container;\n  }\n\n  /**\n   * Gets the html element for a component ref.\n   *\n   * @param componentRef\n   *\n   * @memberOf InjectionService\n   */\n  getComponentRootNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\n    if (isViewContainerRef(component)) {\n      return component.element.nativeElement;\n    }\n    if (component.hostView && (component.hostView as EmbeddedViewRef<any>).rootNodes.length > 0) {\n      return (component.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    }\n\n    // the top most component root node has no `hostView`\n    return component.location.nativeElement;\n  }\n\n  /**\n   * Gets the root component container html element.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainerNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\n    return this.getComponentRootNode(component);\n  }\n\n  /**\n   * Projects the bindings onto the component\n   *\n   * @param component\n   * @param options\n   *\n   * @memberOf InjectionService\n   */\n  projectComponentBindings(component: ComponentRef<any>, bindings: any): ComponentRef<any> {\n    if (bindings) {\n      if (bindings.inputs !== undefined) {\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n        for (const bindingName of bindingKeys) {\n          component.instance[bindingName] = bindings.inputs[bindingName];\n        }\n      }\n\n      if (bindings.outputs !== undefined) {\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n        for (const eventName of eventKeys) {\n          component.instance[eventName] = bindings.outputs[eventName];\n        }\n      }\n    }\n\n    return component;\n  }\n\n  /**\n   * Appends a component to a adjacent location\n   *\n   * @param componentClass\n   * @param [options={}]\n   * @param [location]\n   *\n   * @memberOf InjectionService\n   */\n  appendComponent<T>(componentClass: Type<T>, bindings: any = {}, location?: any): ComponentRef<any> {\n    if (!location) location = this.getRootViewContainer();\n    const appendLocation = this.getComponentRootNode(location);\n\n    const portalHost = new DomPortalHost(\n      appendLocation,\n      this.componentFactoryResolver,\n      this.applicationRef,\n      this.injector\n    );\n\n    const portal = new ComponentPortal(componentClass);\n\n    const componentRef = portalHost.attach(portal);\n    this.projectComponentBindings(componentRef, bindings);\n    return componentRef;\n  }\n}\n","/**\n * Throttle a function\n *\n */\nexport function throttle(func: any, wait: number, options?: any) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nexport function throttleable(duration: number, options?: any) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n\n        return this[key];\n      }\n    };\n  };\n}\n","import { PlacementTypes } from './placement.type';\n\nconst caretOffset = 7;\n\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'top') {\n    return elDimensions.top - caretOffset;\n  }\n\n  if (alignment === 'bottom') {\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n  }\n\n  return undefined;\n}\n\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'left') {\n    return elDimensions.left - caretOffset;\n  }\n\n  if (alignment === 'right') {\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n  }\n\n  return undefined;\n}\n\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nexport class PositionHelper {\n  /**\n   * Calculate vertical alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment): number {\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.height > window.innerHeight) {\n      result = window.innerHeight - popoverDimensions.height;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate vertical caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\n    let result;\n\n    if (alignment === 'top') {\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n    }\n\n    if (alignment === 'bottom') {\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n    }\n\n    if (alignment === 'center') {\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n    }\n\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment): number {\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.width > window.innerWidth) {\n      result = window.innerWidth - popoverDimensions.width;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\n    let result;\n\n    if (alignment === 'left') {\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n    }\n\n    if (alignment === 'right') {\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n    }\n\n    if (alignment === 'center') {\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n    }\n\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if the element's position should be flipped\n   *\n   * @memberOf PositionHelper\n   */\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing): boolean {\n    let flip = false;\n\n    if (placement === 'right') {\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'left') {\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'top') {\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'bottom') {\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n        flip = true;\n      }\n    }\n\n    return flip;\n  }\n\n  /**\n   * Position caret\n   *\n   * @memberOf PositionHelper\n   */\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.right) {\n      left = -7;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.left) {\n      left = elmDim.width;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.top) {\n      top = elmDim.height;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.bottom) {\n      top = -7;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Position content\n   *\n   * @memberOf PositionHelper\n   */\n  static positionContent(placement, elmDim, hostDim, spacing, alignment): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.right) {\n      left = hostDim.left + hostDim.width + spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.left) {\n      left = hostDim.left - elmDim.width - spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.top) {\n      top = hostDim.top - elmDim.height - spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.bottom) {\n      top = hostDim.top + hostDim.height + spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Determine placement based on flip\n   *\n   * @memberOf PositionHelper\n   */\n  static determinePlacement(placement, elmDim, hostDim, spacing): any {\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n\n    if (shouldFlip) {\n      if (placement === PlacementTypes.right) {\n        return PlacementTypes.left;\n      } else if (placement === PlacementTypes.left) {\n        return PlacementTypes.right;\n      } else if (placement === PlacementTypes.top) {\n        return PlacementTypes.bottom;\n      } else if (placement === PlacementTypes.bottom) {\n        return PlacementTypes.top;\n      }\n    }\n\n    return placement;\n  }\n}\n","import {\n  Input,\n  Component,\n  ElementRef,\n  AfterViewInit,\n  ViewEncapsulation,\n  HostListener,\n  ViewChild,\n  HostBinding,\n  Renderer2\n} from '@angular/core';\n\nimport { throttleable } from '../../utils/throttle';\nimport { PositionHelper, PlacementTypes } from './position';\n\nimport { StyleTypes } from './style.type';\nimport { AlignmentTypes } from './alignment.type';\n\n@Component({\n  selector: 'ngx-tooltip-content',\n  template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./tooltip.component.scss']\n})\nexport class TooltipContentComponent implements AfterViewInit {\n  @Input() host: any;\n  @Input() showCaret: boolean;\n  @Input() type: StyleTypes;\n  @Input() placement: PlacementTypes;\n  @Input() alignment: AlignmentTypes;\n  @Input() spacing: number;\n  @Input() cssClass: string;\n  @Input() title: string;\n  @Input() template: any;\n  @Input() context: any;\n\n  @ViewChild('caretElm') caretElm;\n\n  @HostBinding('class')\n  get cssClasses(): string {\n    let clz = 'ngx-charts-tooltip-content';\n    clz += ` position-${this.placement}`;\n    clz += ` type-${this.type}`;\n    clz += ` ${this.cssClass}`;\n    return clz;\n  }\n\n  constructor(public element: ElementRef, private renderer: Renderer2) {}\n\n  ngAfterViewInit(): void {\n    setTimeout(this.position.bind(this));\n  }\n\n  position(): void {\n    const nativeElm = this.element.nativeElement;\n    const hostDim = this.host.nativeElement.getBoundingClientRect();\n\n    // if no dims were found, never show\n    if (!hostDim.height && !hostDim.width) return;\n\n    const elmDim = nativeElm.getBoundingClientRect();\n    this.checkFlip(hostDim, elmDim);\n    this.positionContent(nativeElm, hostDim, elmDim);\n\n    if (this.showCaret) {\n      this.positionCaret(hostDim, elmDim);\n    }\n\n    // animate its entry\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n  }\n\n  positionContent(nativeElm, hostDim, elmDim): void {\n    const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n  }\n\n  positionCaret(hostDim, elmDim): void {\n    const caretElm = this.caretElm.nativeElement;\n    const caretDimensions = caretElm.getBoundingClientRect();\n    const { top, left } = PositionHelper.positionCaret(\n      this.placement,\n      elmDim,\n      hostDim,\n      caretDimensions,\n      this.alignment\n    );\n\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\n  }\n\n  checkFlip(hostDim, elmDim): void {\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n  }\n\n  @HostListener('window:resize')\n  @throttleable(100)\n  onWindowResize(): void {\n    this.position();\n  }\n}\n","import { ComponentRef, Type } from '@angular/core';\nimport { InjectionService } from './injection.service';\n\nexport interface PartialBindings {\n  inputs?: object;\n  outputs?: object;\n}\n\nexport abstract class InjectionRegisteryService<T = any> {\n  protected abstract type: Type<T>;\n\n  protected defaults: PartialBindings = {};\n  protected components: Map<any, Array<ComponentRef<T>>> = new Map();\n\n  constructor(public injectionService: InjectionService) {}\n\n  getByType(type: Type<T> = this.type) {\n    return this.components.get(type);\n  }\n\n  create(bindings: object): ComponentRef<T> {\n    return this.createByType(this.type, bindings);\n  }\n\n  createByType(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    bindings = this.assignDefaults(bindings);\n\n    const component = this.injectComponent(type, bindings);\n    this.register(type, component);\n\n    return component;\n  }\n\n  destroy(instance: ComponentRef<T>): void {\n    const compsByType = this.components.get(instance.componentType);\n\n    if (compsByType && compsByType.length) {\n      const idx = compsByType.indexOf(instance);\n\n      if (idx > -1) {\n        const component = compsByType[idx];\n        component.destroy();\n        compsByType.splice(idx, 1);\n      }\n    }\n  }\n\n  destroyAll(): void {\n    this.destroyByType(this.type);\n  }\n\n  destroyByType(type: Type<T>): void {\n    const comps = this.components.get(type);\n\n    if (comps && comps.length) {\n      let i = comps.length - 1;\n      while (i >= 0) {\n        this.destroy(comps[i--]);\n      }\n    }\n  }\n\n  protected injectComponent(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    return this.injectionService.appendComponent(type, bindings);\n  }\n\n  protected assignDefaults(bindings: PartialBindings): PartialBindings {\n    const inputs = { ...this.defaults.inputs };\n    const outputs = { ...this.defaults.outputs };\n\n    if (!bindings.inputs && !bindings.outputs) {\n      bindings = { inputs: bindings };\n    }\n\n    if (inputs) {\n      bindings.inputs = { ...inputs, ...bindings.inputs };\n    }\n\n    if (outputs) {\n      bindings.outputs = { ...outputs, ...bindings.outputs };\n    }\n\n    return bindings;\n  }\n\n  protected register(type: Type<T>, component: ComponentRef<T>): void {\n    if (!this.components.has(type)) {\n      this.components.set(type, []);\n    }\n\n    const types = this.components.get(type);\n    types.push(component);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { InjectionService } from './injection.service';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { InjectionRegisteryService } from './injection-registery.service';\n@Injectable()\nexport class TooltipService extends InjectionRegisteryService<TooltipContentComponent> {\n  type: any = TooltipContentComponent;\n\n  constructor(injectionService: InjectionService) {\n    super(injectionService);\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { TooltipService } from '../tooltip/tooltip.service';\n\n@Component({\n  providers: [TooltipService],\n  selector: 'ngx-charts-chart',\n  template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [@animationState]=\"'active'\" [@.disabled]=\"!animations\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === 'scaleLegend'\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === 'legend'\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [style({ opacity: 0 }), animate('500ms 100ms', style({ opacity: 1 }))])\n    ])\n  ]\n})\nexport class ChartComponent implements OnChanges {\n  @Input() view;\n  @Input() showLegend = false;\n  @Input() legendOptions: any;\n\n  // remove\n  @Input() data;\n  @Input() legendData;\n  @Input() legendType: any;\n  @Input() colors: any;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() legendLabelClick: EventEmitter<any> = new EventEmitter();\n  @Output() legendLabelActivate: EventEmitter<any> = new EventEmitter();\n  @Output() legendLabelDeactivate: EventEmitter<any> = new EventEmitter();\n\n  chartWidth: any;\n  title: any;\n  legendWidth: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    let legendColumns = 0;\n    if (this.showLegend) {\n      this.legendType = this.getLegendType();\n\n      if (!this.legendOptions || this.legendOptions.position === 'right') {\n        if (this.legendType === 'scaleLegend') {\n          legendColumns = 1;\n        } else {\n          legendColumns = 2;\n        }\n      }\n    }\n\n    const chartColumns = 12 - legendColumns;\n\n    this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\n    this.legendWidth =\n      !this.legendOptions || this.legendOptions.position === 'right'\n        ? Math.floor((this.view[0] * legendColumns) / 12.0)\n        : this.chartWidth;\n  }\n\n  getLegendType(): string {\n    if (this.legendOptions.scaleType === 'linear') {\n      return 'scaleLegend';\n    } else {\n      return 'legend';\n    }\n  }\n}\n","import { Output, EventEmitter, NgZone, Directive, ElementRef } from '@angular/core';\n\n/**\n * Visibility Observer\n */\n@Directive({\n  selector: 'visibility-observer'\n})\nexport class VisibilityObserver {\n  @Output() visible: EventEmitter<any> = new EventEmitter();\n\n  timeout: any;\n  isVisible: boolean = false;\n\n  constructor(private element: ElementRef, private zone: NgZone) {\n    this.runCheck();\n  }\n\n  destroy(): void {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange(): void {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck(): void {\n    const check = () => {\n      if (!this.element) {\n        return;\n      }\n\n      // https://davidwalsh.name/offsetheight-visibility\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 100);\n        });\n      }\n    };\n\n    this.zone.runOutsideAngular(() => {\n      this.timeout = setTimeout(() => check());\n    });\n  }\n}\n","import {\n  ElementRef,\n  NgZone,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\n\nimport { fromEvent as observableFromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { VisibilityObserver } from '../utils/visibility-observer';\n\n@Component({\n  selector: 'base-chart',\n  template: ` <div></div> `\n})\nexport class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {\n  @Input() results: any;\n  @Input() view: [number, number];\n  @Input() scheme: any = 'cool';\n  @Input() schemeType: string = 'ordinal';\n  @Input() customColors: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  width: number;\n  height: number;\n  resizeSubscription: any;\n  visibilityObserver: VisibilityObserver;\n\n  constructor(protected chartElement: ElementRef, protected zone: NgZone, protected cd: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    this.bindWindowResizeEvent();\n\n    // listen for visibility of the element for hidden by default scenario\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.unbindEvents();\n    if (this.visibilityObserver) {\n      this.visibilityObserver.visible.unsubscribe();\n      this.visibilityObserver.destroy();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.results) {\n      this.results = this.cloneData(this.results);\n    } else {\n      this.results = [];\n    }\n\n    if (this.view) {\n      this.width = this.view[0];\n      this.height = this.view[1];\n    } else {\n      const dims = this.getContainerDims();\n      if (dims) {\n        this.width = dims.width;\n        this.height = dims.height;\n      }\n    }\n\n    // default values if width or height are 0 or undefined\n    if (!this.width) {\n      this.width = 600;\n    }\n\n    if (!this.height) {\n      this.height = 400;\n    }\n\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  getContainerDims(): any {\n    let width;\n    let height;\n    const hostElem = this.chartElement.nativeElement;\n\n    if (hostElem.parentNode !== null) {\n      // Get the container dimensions\n      const dims = hostElem.parentNode.getBoundingClientRect();\n      width = dims.width;\n      height = dims.height;\n    }\n\n    if (width && height) {\n      return { width, height };\n    }\n\n    return null;\n  }\n\n  /**\n   * Converts all date objects that appear as name\n   * into formatted date strings\n   */\n  formatDates(): void {\n    for (let i = 0; i < this.results.length; i++) {\n      const g = this.results[i];\n      g.label = g.name;\n      if (g.label instanceof Date) {\n        g.label = g.label.toLocaleDateString();\n      }\n\n      if (g.series) {\n        for (let j = 0; j < g.series.length; j++) {\n          const d = g.series[j];\n          d.label = d.name;\n          if (d.label instanceof Date) {\n            d.label = d.label.toLocaleDateString();\n          }\n        }\n      }\n    }\n  }\n\n  protected unbindEvents(): void {\n    if (this.resizeSubscription) {\n      this.resizeSubscription.unsubscribe();\n    }\n  }\n\n  private bindWindowResizeEvent(): void {\n    const source = observableFromEvent(window, 'resize');\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n      this.update();\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    });\n    this.resizeSubscription = subscription;\n  }\n\n  /**\n   * Clones the data into a new object\n   *\n   * @memberOf BaseChart\n   */\n  private cloneData(data): any {\n    const results = [];\n\n    for (const item of data) {\n      const copy = {\n        name: item['name']\n      };\n\n      if (item['value'] !== undefined) {\n        copy['value'] = item['value'];\n      }\n\n      if (item['series'] !== undefined) {\n        copy['series'] = [];\n        for (const seriesItem of item['series']) {\n          const seriesItemCopy = Object.assign({}, seriesItem);\n          copy['series'].push(seriesItemCopy);\n        }\n      }\n\n      if (item['extra'] !== undefined) {\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n      }\n\n      results.push(copy);\n    }\n\n    return results;\n  }\n}\n","import { Component, Input, ElementRef, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-axis-label]',\n  template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AxisLabelComponent implements OnChanges {\n  @Input() orient;\n  @Input() label;\n  @Input() offset;\n  @Input() width;\n  @Input() height;\n\n  x: any;\n  y: any;\n  transform: any;\n  strokeWidth: any;\n  textAnchor: any;\n  element: ElementRef;\n  textHeight = 25;\n  margin = 5;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.strokeWidth = '0.01';\n    this.textAnchor = 'middle';\n    this.transform = '';\n\n    switch (this.orient) {\n      case 'top':\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case 'bottom':\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case 'left':\n        this.y = -(this.offset + this.textHeight + this.margin);\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      case 'right':\n        this.y = this.offset + this.margin;\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      default:\n    }\n  }\n}\n","export function trimLabel(s, max = 16): string {\n  if (typeof s !== 'string') {\n    if (typeof s === 'number') {\n      return s + '';\n    } else {\n      return '';\n    }\n  }\n\n  s = s.trim();\n  if (s.length <= max) {\n    return s;\n  } else {\n    return `${s.slice(0, max)}...`;\n  }\n}\n","export function reduceTicks(ticks, maxTicks) {\n  if (ticks.length > maxTicks) {\n    const reduced = [];\n    const modulus = Math.floor(ticks.length / maxTicks);\n    for (let i = 0; i < ticks.length; i++) {\n      if (i % modulus === 0) {\n        reduced.push(ticks[i]);\n      }\n    }\n    ticks = reduced;\n  }\n\n  return ticks;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  SimpleChanges,\n  AfterViewInit,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.text-anchor]=\"textAnchor\"\n          [attr.transform]=\"textTransform\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient;\n  @Input() tickArguments = [5];\n  @Input() tickValues: any[];\n  @Input() tickStroke = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() gridLineHeight;\n  @Input() width;\n  @Input() rotateTicks: boolean = true;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  verticalSpacing: number = 20;\n  rotateLabels: boolean = false;\n  innerTickSize: number = 6;\n  outerTickSize: number = 6;\n  tickPadding: number = 3;\n  textAnchor: string = 'middle';\n  maxTicksLength: number = 0;\n  maxAllowedLength: number = 16;\n  adjustedScale: any;\n  textTransform: any;\n  ticks: any;\n  tickFormat: (o: any) => any;\n  height: number = 0;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n    if (height !== this.height) {\n      this.height = height;\n      this.dimensionsChanged.emit({ height });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    const scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n\n    this.adjustedScale = this.scale.bandwidth\n      ? function (d) {\n          return this.scale(d) + this.scale.bandwidth() * 0.5;\n        }\n      : this.scale;\n\n    this.textTransform = '';\n    if (angle && angle !== 0) {\n      this.textTransform = `rotate(${angle})`;\n      this.textAnchor = 'end';\n      this.verticalSpacing = 10;\n    } else {\n      this.textAnchor = 'middle';\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  getRotationAngle(ticks): number {\n    let angle = 0;\n    this.maxTicksLength = 0;\n    for (let i = 0; i < ticks.length; i++) {\n      const tick = this.tickFormat(ticks[i]).toString();\n      let tickLength = tick.length;\n      if (this.trimTicks) {\n        tickLength = this.tickTrim(tick).length;\n      }\n\n      if (tickLength > this.maxTicksLength) {\n        this.maxTicksLength = tickLength;\n      }\n    }\n\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n    const charWidth = 8; // need to measure this\n    const wordWidth = len * charWidth;\n\n    let baseWidth = wordWidth;\n    const maxBaseWidth = Math.floor(this.width / ticks.length);\n\n    // calculate optimal angle\n    while (baseWidth > maxBaseWidth && angle > -90) {\n      angle -= 30;\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n    }\n\n    return angle;\n  }\n\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(100);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickWidth: number): number {\n    return Math.floor(this.width / tickWidth);\n  }\n\n  tickTransform(tick): string {\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n  }\n\n  gridLineTransform(): string {\n    return `translate(0,${-this.verticalSpacing - 5})`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis]',\n  template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"'bottom'\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisComponent implements OnChanges {\n  @Input() xScale;\n  @Input() dims;\n  @Input() trimTicks: boolean;\n  @Input() rotateTicks: boolean = true;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() showLabel;\n  @Input() labelText;\n  @Input() ticks: any[];\n  @Input() xAxisTickInterval;\n  @Input() xAxisTickCount: any;\n  @Input() xOrient: string = 'bottom';\n  @Input() xAxisOffset: number = 0;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  xAxisClassName: string = 'x axis';\n\n  tickArguments: any;\n  transform: any;\n  labelOffset: number = 0;\n  fill: string = 'none';\n  stroke: string = 'stroke';\n  tickStroke: string = '#ccc';\n  strokeWidth: string = 'none';\n  padding: number = 5;\n\n  @ViewChild(XAxisTicksComponent) ticksComponent: XAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n\n    if (typeof this.xAxisTickCount !== 'undefined') {\n      this.tickArguments = [this.xAxisTickCount];\n    }\n  }\n\n  emitTicksHeight({ height }): void {\n    const newLabelOffset = height + 25 + 5;\n    if (newLabelOffset !== this.labelOffset) {\n      this.labelOffset = newLabelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ height });\n      }, 0);\n    }\n  }\n}\n","/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nexport function roundedRect(x, y, w, h, r, [tl, tr, bl, br]: boolean[]) {\n  let retval = '';\n\n  w = Math.floor(w);\n  h = Math.floor(h);\n\n  w = w === 0 ? 1 : w;\n  h = h === 0 ? 1 : h;\n\n  retval = `M${[x + r, y]}`;\n  retval += `h${w - 2 * r}`;\n\n  if (tr) {\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n  } else {\n    retval += `h${r}v${r}`;\n  }\n\n  retval += `v${h - 2 * r}`;\n\n  if (br) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n  } else {\n    retval += `v${r}h${-r}`;\n  }\n\n  retval += `h${2 * r - w}`;\n\n  if (bl) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n  } else {\n    retval += `h${-r}v${-r}`;\n  }\n\n  retval += `v${2 * r - h}`;\n\n  if (tl) {\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n  } else {\n    retval += `v${-r}h${r}`;\n  }\n\n  retval += `z`;\n\n  return retval;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  EventEmitter,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  SimpleChanges\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\nimport { roundedRect } from '../../common/shape.helper';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.dy]=\"dy\"\n          [attr.x]=\"x1\"\n          [attr.y]=\"y1\"\n          [attr.text-anchor]=\"textAnchor\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === 'left'\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === 'right'\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient;\n  @Input() tickArguments = [5];\n  @Input() tickValues: any[];\n  @Input() tickStroke = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() gridLineWidth;\n  @Input() height;\n  @Input() referenceLines;\n  @Input() showRefLabels: boolean = false;\n  @Input() showRefLines: boolean = false;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  innerTickSize: any = 6;\n  tickPadding: any = 3;\n  tickSpacing: any;\n  verticalSpacing: number = 20;\n  textAnchor: any = 'middle';\n  dy: any;\n  x1: any;\n  x2: any;\n  y1: any;\n  y2: any;\n  adjustedScale: any;\n  transform: (o: any) => string;\n  tickFormat: (o: any) => string;\n  ticks: any;\n  width: number = 0;\n  outerTickSize: number = 6;\n  rotateLabels: boolean = false;\n  refMax: number;\n  refMin: number;\n  referenceLineLength: number = 0;\n  referenceAreaPath: string;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n    if (width !== this.width) {\n      this.width = width;\n      this.dimensionsChanged.emit({ width });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    let scale;\n    const sign = this.orient === 'top' || this.orient === 'right' ? -1 : 1;\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n\n    scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    this.adjustedScale = scale.bandwidth\n      ? function (d) {\n          return scale(d) + scale.bandwidth() * 0.5;\n        }\n      : scale;\n\n    if (this.showRefLines && this.referenceLines) {\n      this.setReferencelines();\n    }\n\n    switch (this.orient) {\n      case 'top':\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = 'middle';\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case 'bottom':\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = 'middle';\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case 'left':\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = 'end';\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      case 'right':\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = 'start';\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      default:\n    }\n    setTimeout(() => this.updateDims());\n  }\n\n  setReferencelines(): void {\n    this.refMin = this.adjustedScale(\n      Math.min.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.refMax = this.adjustedScale(\n      Math.max.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.referenceLineLength = this.referenceLines.length;\n\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n      false,\n      false,\n      false,\n      false\n    ]);\n  }\n\n  getTicks(): any {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(50);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickHeight: number): number {\n    return Math.floor(this.height / tickHeight);\n  }\n\n  tickTransform(tick): string {\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n  }\n\n  gridLineTransform(): string {\n    return `translate(5,0)`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis]',\n  template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisComponent implements OnChanges {\n  @Input() yScale;\n  @Input() dims;\n  @Input() trimTicks: boolean;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() ticks: any[];\n  @Input() showGridLines = false;\n  @Input() showLabel;\n  @Input() labelText;\n  @Input() yAxisTickInterval;\n  @Input() yAxisTickCount: any;\n  @Input() yOrient: string = 'left';\n  @Input() referenceLines;\n  @Input() showRefLines;\n  @Input() showRefLabels;\n  @Input() yAxisOffset: number = 0;\n  @Output() dimensionsChanged = new EventEmitter();\n\n  yAxisClassName: string = 'y axis';\n  tickArguments: any;\n  offset: any;\n  transform: any;\n  labelOffset: number = 15;\n  fill: string = 'none';\n  stroke: string = '#CCC';\n  tickStroke: string = '#CCC';\n  strokeWidth: number = 1;\n  padding: number = 5;\n\n  @ViewChild(YAxisTicksComponent) ticksComponent: YAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.offset = -(this.yAxisOffset + this.padding);\n    if (this.yOrient === 'right') {\n      this.labelOffset = 65;\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n    } else {\n      this.offset = this.offset;\n      this.transform = `translate(${this.offset} , 0)`;\n    }\n\n    if (this.yAxisTickCount !== undefined) {\n      this.tickArguments = [this.yAxisTickCount];\n    }\n  }\n\n  emitTicksWidth({ width }): void {\n    if (width !== this.labelOffset && this.yOrient === 'right') {\n      this.labelOffset = width + this.labelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    } else if (width !== this.labelOffset) {\n      this.labelOffset = width;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    }\n  }\n}\n","export enum StyleTypes {\n  popover = 'popover' as any,\n  tooltip = 'tooltip' as any\n}\n","export enum AlignmentTypes {\n  left = 'left' as any,\n  center = 'center' as any,\n  right = 'right' as any\n}\n","export enum ShowTypes {\n  all = 'all' as any,\n  focus = 'focus' as any,\n  mouseover = 'mouseover' as any\n}\n","import { NgModule } from '@angular/core';\nimport { AxisLabelComponent } from './axis-label.component';\nimport { XAxisComponent } from './x-axis.component';\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\nimport { YAxisComponent } from './y-axis.component';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n  exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n})\nexport class AxesModule {}\n","import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewContainerRef,\n  Renderer2,\n  OnDestroy\n} from '@angular/core';\n\nimport { PlacementTypes } from './position';\nimport { StyleTypes } from './style.type';\nimport { AlignmentTypes } from './alignment.type';\nimport { ShowTypes } from './show.type';\n\nimport { TooltipService } from './tooltip.service';\n\n@Directive({ selector: '[ngx-tooltip]' })\nexport class TooltipDirective implements OnDestroy {\n  @Input() tooltipCssClass: string = '';\n  @Input() tooltipTitle: string = '';\n  @Input() tooltipAppendToBody: boolean = true;\n  @Input() tooltipSpacing: number = 10;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipShowCaret: boolean = true;\n  @Input() tooltipPlacement: PlacementTypes = PlacementTypes.top;\n  @Input() tooltipAlignment: AlignmentTypes = AlignmentTypes.center;\n  @Input() tooltipType: StyleTypes = StyleTypes.popover;\n  @Input() tooltipCloseOnClickOutside: boolean = true;\n  @Input() tooltipCloseOnMouseLeave: boolean = true;\n  @Input() tooltipHideTimeout: number = 300;\n  @Input() tooltipShowTimeout: number = 100;\n  @Input() tooltipTemplate: any;\n  @Input() tooltipShowEvent: ShowTypes = ShowTypes.all;\n  @Input() tooltipContext: any;\n  @Input() tooltipImmediateExit: boolean = false;\n\n  @Output() show = new EventEmitter();\n  @Output() hide = new EventEmitter();\n\n  private get listensForFocus(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n  }\n\n  private get listensForHover(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n  }\n\n  private component: any;\n  private timeout: any;\n  private mouseLeaveContentEvent: any;\n  private mouseEnterContentEvent: any;\n  private documentClickEvent: any;\n\n  constructor(\n    private tooltipService: TooltipService,\n    private viewContainerRef: ViewContainerRef,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnDestroy(): void {\n    this.hideTooltip(true);\n  }\n\n  @HostListener('focusin')\n  onFocus(): void {\n    if (this.listensForFocus) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('blur')\n  onBlur(): void {\n    if (this.listensForFocus) {\n      this.hideTooltip(true);\n    }\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    if (this.listensForHover) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('mouseleave', ['$event.target'])\n  onMouseLeave(target): void {\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n      clearTimeout(this.timeout);\n\n      if (this.component) {\n        const contentDom = this.component.instance.element.nativeElement;\n        const contains = contentDom.contains(target);\n        if (contains) return;\n      }\n\n      this.hideTooltip(this.tooltipImmediateExit);\n    }\n  }\n\n  @HostListener('click')\n  onMouseClick() {\n    if (this.listensForHover) {\n      this.hideTooltip(true);\n    }\n  }\n\n  showTooltip(immediate?: boolean): void {\n    if (this.component || this.tooltipDisabled) return;\n\n    const time = immediate ? 0 : this.tooltipShowTimeout;\n\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.tooltipService.destroyAll();\n\n      const options = this.createBoundOptions();\n      this.component = this.tooltipService.create(options);\n\n      // add a tiny timeout to avoid event re-triggers\n      setTimeout(() => {\n        if (this.component) {\n          this.addHideListeners(this.component.instance.element.nativeElement);\n        }\n      }, 10);\n\n      this.show.emit(true);\n    }, time);\n  }\n\n  addHideListeners(tooltip): void {\n    // on mouse enter, cancel the hide triggered by the leave\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n      clearTimeout(this.timeout);\n    });\n\n    // content mouse leave listener\n    if (this.tooltipCloseOnMouseLeave) {\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n        this.hideTooltip(this.tooltipImmediateExit);\n      });\n    }\n\n    // content close on click outside\n    if (this.tooltipCloseOnClickOutside) {\n      this.documentClickEvent = this.renderer.listen(document, 'click', event => {\n        const contains = tooltip.contains(event.target);\n        if (!contains) this.hideTooltip();\n      });\n    }\n  }\n\n  hideTooltip(immediate: boolean = false): void {\n    if (!this.component) return;\n\n    const destroyFn = () => {\n      // remove events\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\n      if (this.documentClickEvent) this.documentClickEvent();\n\n      // emit events\n      this.hide.emit(true);\n\n      // destroy component\n      this.tooltipService.destroy(this.component);\n      this.component = undefined;\n    };\n\n    clearTimeout(this.timeout);\n    if (!immediate) {\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n    } else {\n      destroyFn();\n    }\n  }\n\n  private createBoundOptions(): any {\n    return {\n      title: this.tooltipTitle,\n      template: this.tooltipTemplate,\n      host: this.viewContainerRef.element,\n      placement: this.tooltipPlacement,\n      alignment: this.tooltipAlignment,\n      type: this.tooltipType,\n      showCaret: this.tooltipShowCaret,\n      cssClass: this.tooltipCssClass,\n      spacing: this.tooltipSpacing,\n      context: this.tooltipContext\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TooltipDirective } from './tooltip.directive';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\nimport { InjectionService } from './injection.service';\n\n@NgModule({\n  declarations: [TooltipContentComponent, TooltipDirective],\n  providers: [InjectionService, TooltipService],\n  exports: [TooltipContentComponent, TooltipDirective],\n  imports: [CommonModule],\n  entryComponents: [TooltipContentComponent]\n})\nexport class TooltipModule {}\n","/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nexport function formatLabel(label: any): string {\n  if (label instanceof Date) {\n    label = label.toLocaleDateString();\n  } else {\n    label = label.toLocaleString();\n  }\n\n  return label;\n}\n\n/**\n * Escapes a label.\n *\n * @export\n */\nexport function escapeLabel(label: any): string {\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n    return {\n      '&': '&amp;',\n      // tslint:disable-next-line: quotemark\n      \"'\": '&#x27;',\n      '`': '&#x60;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    }[match];\n  });\n}\n","const cache = {};\n\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nexport function id(): string {\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n\n  // append a 'a' because neo gets mad\n  newId = `a${newId}`;\n\n  // ensure not already used\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'g[ngx-charts-circle-series]',\n  template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          orientation=\"vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 1 }))\n      ])\n    ])\n  ]\n})\nexport class CircleSeriesComponent implements OnChanges, OnInit {\n  @Input() data;\n  @Input() type = 'standard';\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors: ColorHelper;\n  @Input() scaleType;\n  @Input() visibleValue;\n  @Input() activeEntries: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  areaPath: any;\n  circle: any; // active circle\n  barVisible: boolean = false;\n  gradientId: string;\n  gradientFill: string;\n\n  ngOnInit() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circle = this.getActiveCircle();\n  }\n\n  getActiveCircle(): {} {\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\n      const label = d.name;\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n    });\n\n    if (indexActiveDataPoint === -1) {\n      // No valid point is 'active/hovered over' at this moment.\n      return undefined;\n    }\n\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n  }\n\n  mapDataPointToCircle(d: any, i: number): any {\n    const seriesName = this.data.name;\n\n    const value = d.value;\n    const label = d.name;\n    const tooltipLabel = formatLabel(label);\n\n    let cx;\n    if (this.scaleType === 'time') {\n      cx = this.xScale(label);\n    } else if (this.scaleType === 'linear') {\n      cx = this.xScale(Number(label));\n    } else {\n      cx = this.xScale(label);\n    }\n\n    const cy = this.yScale(this.type === 'standard' ? value : d.d1);\n    const radius = 5;\n    const height = this.yScale.range()[0] - cy;\n    const opacity = 1;\n\n    let color;\n    if (this.colors.scaleType === 'linear') {\n      if (this.type === 'standard') {\n        color = this.colors.getColor(value);\n      } else {\n        color = this.colors.getColor(d.d1);\n      }\n    } else {\n      color = this.colors.getColor(seriesName);\n    }\n\n    const data = Object.assign({}, d, {\n      series: seriesName,\n      value,\n      name: label\n    });\n\n    return {\n      classNames: [`circle-data-${i}`],\n      value,\n      label,\n      data,\n      cx,\n      cy,\n      radius,\n      height,\n      tooltipLabel,\n      color,\n      opacity,\n      seriesName,\n      gradientStops: this.getGradientStops(color),\n      min: d.min,\n      max: d.max\n    };\n  }\n\n  getTooltipText({ tooltipLabel, value, seriesName, min, max }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n  }\n\n  getTooltipMinMaxText(min: any, max: any) {\n    if (min !== undefined || max !== undefined) {\n      let result = ' (';\n      if (min !== undefined) {\n        if (max === undefined) {\n          result += '≥';\n        }\n        result += min.toLocaleString();\n        if (max !== undefined) {\n          result += ' - ';\n        }\n      } else if (max !== undefined) {\n        result += '≤';\n      }\n      if (max !== undefined) {\n        result += max.toLocaleString();\n      }\n      result += ')';\n      return result;\n    } else {\n      return '';\n    }\n  }\n\n  getGradientStops(color) {\n    return [\n      {\n        offset: 0,\n        color,\n        opacity: 0.2\n      },\n      {\n        offset: 100,\n        color,\n        opacity: 1\n      }\n    ];\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activateCircle(): void {\n    this.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(): void {\n    this.barVisible = false;\n    this.circle.opacity = 0;\n    this.deactivate.emit({ name: this.data.name });\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-circle]',\n  template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CircleComponent implements OnChanges {\n  @Input() cx;\n  @Input() cy;\n  @Input() r;\n  @Input() fill;\n  @Input() stroke;\n  @Input() data;\n  @Input() classNames;\n  @Input() circleOpacity;\n  @Input() pointerEvents;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  @HostListener('click')\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n    this.classNames += 'circle';\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel]',\n  template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelComponent {\n  @Input() path;\n  @Input() width;\n  @Input() height;\n  @Input() x;\n  @Input() y;\n}\n","import { Component, SimpleChanges, Input, OnChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel-series]',\n  template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelSeriesComponent implements OnChanges {\n  gridPanels: any[];\n\n  @Input()\n  data;\n\n  @Input()\n  dims;\n\n  @Input()\n  xScale;\n\n  @Input()\n  yScale;\n\n  @Input()\n  orient;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.gridPanels = this.getGridPanels();\n  }\n\n  getGridPanels(): any[] {\n    return this.data.map(d => {\n      let offset;\n      let width;\n      let height;\n      let x;\n      let y;\n      let className = 'odd';\n\n      if (this.orient === 'vertical') {\n        const position: number = this.xScale(d.name);\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = 'even';\n        }\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n        width = this.xScale.bandwidth() + offset;\n        height = this.dims.height;\n        x = this.xScale(d.name) - offset / 2;\n        y = 0;\n      } else if (this.orient === 'horizontal') {\n        const position = this.yScale(d.name);\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = 'even';\n        }\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n\n        width = this.dims.width;\n        height = this.yScale.bandwidth() + offset;\n        x = 0;\n        y = this.yScale(d.name) - offset / 2;\n      }\n\n      return {\n        name: d.name,\n        class: className,\n        height,\n        width,\n        x,\n        y\n      };\n    });\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-svg-linear-gradient]',\n  template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgLinearGradientComponent implements OnChanges {\n  @Input() orientation = 'vertical';\n  @Input() name;\n  @Input() stops: any[];\n\n  x1: any;\n  x2: any;\n  y1: any;\n  y2: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.x1 = '0%';\n    this.x2 = '0%';\n    this.y1 = '0%';\n    this.y2 = '0%';\n\n    if (this.orientation === 'horizontal') {\n      this.x2 = '100%';\n    } else if (this.orientation === 'vertical') {\n      this.y1 = '100%';\n    }\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-svg-radial-gradient]',\n  template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgRadialGradientComponent implements OnChanges {\n  @Input() color: string;\n  @Input() name: string;\n  @Input() startOpacity: number;\n  @Input() endOpacity = 1;\n  @Input() cx: number = 0;\n  @Input() cy: number = 0;\n\n  @Input()\n  get stops(): any[] {\n    return this.stopsInput || this.stopsDefault;\n  }\n\n  set stops(value: any[]) {\n    this.stopsInput = value;\n  }\n\n  r: string;\n\n  private stopsInput: any[];\n  private stopsDefault: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.r = '30%';\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n      this.stopsDefault = [\n        {\n          offset: 0,\n          color: this.color,\n          opacity: this.startOpacity\n        },\n        {\n          offset: 100,\n          color: this.color,\n          opacity: this.endOpacity\n        }\n      ];\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-area]',\n  template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaComponent implements OnChanges {\n  @Input() data;\n  @Input() path;\n  @Input() startingPath;\n  @Input() fill;\n  @Input() opacity = 1;\n  @Input() startOpacity = 0.5;\n  @Input() endOpacity = 1;\n  @Input() activeLabel;\n  @Input() gradient: boolean = false;\n  @Input() stops: any[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  element: HTMLElement;\n  gradientId: string;\n  gradientFill: string;\n  areaPath: string;\n  initialized: boolean = false;\n  gradientStops: any[];\n  hasGradient: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      this.loadAnimation();\n      this.initialized = true;\n    } else {\n      this.update();\n    }\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n  }\n\n  loadAnimation(): void {\n    this.areaPath = this.startingPath;\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.area');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: this.endOpacity\n      }\n    ];\n  }\n}\n","// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d) {\n  return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n\n/**\n * Counts from a number to the end incrementally.\n */\nexport function count(countFrom, countTo, countDecimals, countDuration, callback) {\n  const startVal = Number(countFrom);\n  const endVal = Number(countTo);\n  const countDown = startVal > endVal;\n  const decimals = Math.max(0, countDecimals);\n  const dec = Math.pow(10, decimals);\n  const duration = Number(countDuration) * 1000;\n  let startTime;\n\n  function runCount(timestamp) {\n    let frameVal;\n    const progress = timestamp - startTime;\n\n    if (countDown) {\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n    } else {\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n    }\n\n    if (countDown) {\n      frameVal = frameVal < endVal ? endVal : frameVal;\n    } else {\n      frameVal = frameVal > endVal ? endVal : frameVal;\n    }\n\n    frameVal = Math.round(frameVal * dec) / dec;\n\n    const tick = progress < duration;\n    callback({\n      value: frameVal,\n      progress,\n      timestamp,\n      finished: !tick\n    });\n\n    if (tick) {\n      return requestAnimationFrame(val => runCount(val));\n    }\n  }\n\n  return requestAnimationFrame(timestamp => {\n    startTime = timestamp;\n    return runCount(timestamp);\n  });\n}\n\n/**\n * Determine decimals places\n *\n * @export\n */\nexport function decimalChecker(countTo) {\n  const endVal = Number(countTo);\n\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n    return 2;\n  }\n\n  return 0;\n}\n","declare let global: any;\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root: any;\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n}\n\n// tslint:disable-next-line:variable-name\nexport const MouseEvent = root.MouseEvent as MouseEvent & {\n  prototype?: MouseEvent;\n  new (typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\n};\n\nexport function createMouseEvent(name: string, bubbles: boolean = false, cancelable: boolean = true): MouseEvent {\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n  if (typeof MouseEvent === 'function') {\n    // Sane browsers\n    return new MouseEvent(name, { bubbles, cancelable });\n  } else {\n    // IE\n    const event = document.createEvent('MouseEvent');\n    event.initEvent(name, bubbles, cancelable);\n    return event;\n  }\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';\nimport { count, decimalChecker } from './count.helper';\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\n@Component({\n  selector: '[ngx-charts-count-up]',\n  template: ` {{ value }} `\n})\nexport class CountUpDirective implements OnDestroy {\n  @Input() countDuration: number = 1;\n  @Input() countPrefix: string = '';\n  @Input() countSuffix: string = '';\n  @Input() valueFormatting: any;\n\n  @Input()\n  set countDecimals(val: number) {\n    this._countDecimals = val;\n  }\n\n  get countDecimals(): number {\n    if (this._countDecimals) return this._countDecimals;\n    return decimalChecker(this.countTo);\n  }\n\n  @Input()\n  set countTo(val) {\n    this._countTo = parseFloat(val);\n    this.start();\n  }\n\n  get countTo(): any {\n    return this._countTo;\n  }\n\n  @Input()\n  set countFrom(val) {\n    this._countFrom = parseFloat(val);\n    this.start();\n  }\n\n  get countFrom(): any {\n    return this._countFrom;\n  }\n\n  @Output() countChange = new EventEmitter();\n  @Output() countFinish = new EventEmitter();\n\n  nativeElement: any;\n\n  value: any = '';\n  formattedValue: string;\n\n  private animationReq: any;\n\n  private _countDecimals: number = 0;\n  private _countTo: number = 0;\n  private _countFrom: number = 0;\n\n  constructor(private cd: ChangeDetectorRef, element: ElementRef) {\n    this.nativeElement = element.nativeElement;\n  }\n\n  ngOnDestroy(): void {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  start(): void {\n    cancelAnimationFrame(this.animationReq);\n\n    const valueFormatting =\n      this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n\n    const callback = ({ value, progress, finished }) => {\n      this.value = valueFormatting(value);\n      this.cd.markForCheck();\n      if (!finished) this.countChange.emit({ value: this.value, progress });\n      if (finished) this.countFinish.emit({ value: this.value, progress });\n    };\n\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n  }\n}\n","import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { createMouseEvent } from '../events';\n\n@Component({\n  selector: 'g[ngx-charts-tooltip-area]',\n  template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'right'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition('inactive => active', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 0.7 }))\n      ]),\n      transition('active => inactive', [\n        style({\n          opacity: 0.7\n        }),\n        animate(250, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class TooltipArea {\n  anchorOpacity: number = 0;\n  anchorPos: number = -1;\n  anchorValues: any[] = [];\n  lastAnchorPos: number;\n\n  @Input() dims;\n  @Input() xSet;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() results;\n  @Input() colors;\n  @Input() showPercentage: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() hover = new EventEmitter();\n\n  @ViewChild('tooltipAnchor', { static: false }) tooltipAnchor;\n\n  getValues(xVal): any[] {\n    const results = [];\n\n    for (const group of this.results) {\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\n      let groupName = group.name;\n      if (groupName instanceof Date) {\n        groupName = groupName.toLocaleDateString();\n      }\n\n      if (item) {\n        const label = item.name;\n        let val = item.value;\n        if (this.showPercentage) {\n          val = (item.d1 - item.d0).toFixed(2) + '%';\n        }\n        let color;\n        if (this.colors.scaleType === 'linear') {\n          let v = val;\n          if (item.d1) {\n            v = item.d1;\n          }\n          color = this.colors.getColor(v);\n        } else {\n          color = this.colors.getColor(group.name);\n        }\n\n        const data = Object.assign({}, item, {\n          value: val,\n          name: label,\n          series: groupName,\n          min: item.min,\n          max: item.max,\n          color\n        });\n\n        results.push(data);\n      }\n    }\n\n    return results;\n  }\n\n  mouseMove(event) {\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\n\n    const closestIndex = this.findClosestPointIndex(xPos);\n    const closestPoint = this.xSet[closestIndex];\n    this.anchorPos = this.xScale(closestPoint);\n    this.anchorPos = Math.max(0, this.anchorPos);\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n\n    this.anchorValues = this.getValues(closestPoint);\n    if (this.anchorPos !== this.lastAnchorPos) {\n      const ev = createMouseEvent('mouseleave');\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n      this.anchorOpacity = 0.7;\n      this.hover.emit({\n        value: closestPoint\n      });\n      this.showTooltip();\n\n      this.lastAnchorPos = this.anchorPos;\n    }\n  }\n\n  findClosestPointIndex(xPos) {\n    let minIndex = 0;\n    let maxIndex = this.xSet.length - 1;\n    let minDiff = Number.MAX_VALUE;\n    let closestIndex = 0;\n\n    while (minIndex <= maxIndex) {\n      const currentIndex = ((minIndex + maxIndex) / 2) | 0;\n      const currentElement = this.xScale(this.xSet[currentIndex]);\n\n      const curDiff = Math.abs(currentElement - xPos);\n\n      if (curDiff < minDiff) {\n        minDiff = curDiff;\n        closestIndex = currentIndex;\n      }\n\n      if (currentElement < xPos) {\n        minIndex = currentIndex + 1;\n      } else if (currentElement > xPos) {\n        maxIndex = currentIndex - 1;\n      } else {\n        minDiff = 0;\n        closestIndex = currentIndex;\n        break;\n      }\n    }\n\n    return closestIndex;\n  }\n\n  showTooltip(): void {\n    const event = createMouseEvent('mouseenter');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n  }\n\n  hideTooltip(): void {\n    const event = createMouseEvent('mouseleave');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    this.anchorOpacity = 0;\n    this.lastAnchorPos = -1;\n  }\n\n  getToolTipText(tooltipItem: any): string {\n    let result: string = '';\n    if (tooltipItem.series !== undefined) {\n      result += tooltipItem.series;\n    } else {\n      result += '???';\n    }\n    result += ': ';\n    if (tooltipItem.value !== undefined) {\n      result += tooltipItem.value.toLocaleString();\n    }\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n      result += ' (';\n      if (tooltipItem.min !== undefined) {\n        if (tooltipItem.max === undefined) {\n          result += '≥';\n        }\n        result += tooltipItem.min.toLocaleString();\n        if (tooltipItem.max !== undefined) {\n          result += ' - ';\n        }\n      } else if (tooltipItem.max !== undefined) {\n        result += '≤';\n      }\n      if (tooltipItem.max !== undefined) {\n        result += tooltipItem.max.toLocaleString();\n      }\n      result += ')';\n    }\n    return result;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { brushX } from 'd3-brush';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { select, event as d3event } from 'd3-selection';\nimport { id } from '../..//utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-timeline]',\n  template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `,\n  styleUrls: ['./timeline.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Timeline implements OnChanges {\n  @Input() view;\n  @Input() state;\n  @Input() results;\n  @Input() scheme;\n  @Input() customColors;\n  @Input() legend;\n  @Input() miniChart;\n  @Input() autoScale;\n  @Input() scaleType;\n  @Input() height: number = 50;\n\n  @Output() select = new EventEmitter();\n  @Output() onDomainChange = new EventEmitter();\n\n  element: HTMLElement;\n  dims: any;\n  xDomain: any[];\n  xScale: any;\n  brush: any;\n  transform: string;\n  initialized: boolean = false;\n  filterId: any;\n  filter: any;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n\n    if (!this.initialized) {\n      this.addBrush();\n      this.initialized = true;\n    }\n  }\n\n  update(): void {\n    this.dims = this.getDims();\n    this.height = this.dims.height;\n    const offsetY = this.view[1] - this.height;\n\n    this.xDomain = this.getXDomain();\n    this.xScale = this.getXScale();\n\n    if (this.brush) {\n      this.updateBrush();\n    }\n\n    this.transform = `translate(0 , ${offsetY})`;\n\n    this.filterId = 'filter' + id().toString();\n    this.filter = `url(#${this.filterId})`;\n\n    this.cd.markForCheck();\n  }\n\n  getXDomain(): any[] {\n    let values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    let domain = [];\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else {\n      domain = values;\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n    }\n\n    return scale;\n  }\n\n  addBrush(): void {\n    if (this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush = brushX()\n      .extent([\n        [0, 0],\n        [width, height]\n      ])\n      .on('brush end', () => {\n        const selection = d3event.selection || this.xScale.range();\n        const newDomain = selection.map(this.xScale.invert);\n\n        this.onDomainChange.emit(newDomain);\n        this.cd.markForCheck();\n      });\n\n    select(this.element).select('.brush').call(this.brush);\n  }\n\n  updateBrush(): void {\n    if (!this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush.extent([\n      [0, 0],\n      [width, height]\n    ]);\n    select(this.element).select('.brush').call(this.brush);\n\n    // clear hardcoded properties so they can be defined by CSS\n    select(this.element)\n      .select('.selection')\n      .attr('fill', undefined)\n      .attr('stroke', undefined)\n      .attr('fill-opacity', undefined);\n\n    this.cd.markForCheck();\n  }\n\n  getDims(): any {\n    const width = this.view[0];\n\n    const dims = {\n      width,\n      height: this.height\n    };\n\n    return dims;\n  }\n}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectorRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { formatLabel } from '../label.helper';\n\n@Component({\n  selector: 'ngx-charts-legend',\n  template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendComponent implements OnChanges {\n  @Input() data;\n  @Input() title;\n  @Input() colors;\n  @Input() height;\n  @Input() width;\n  @Input() activeEntries;\n  @Input() horizontal = false;\n\n  @Output() labelClick: EventEmitter<any> = new EventEmitter();\n  @Output() labelActivate: EventEmitter<any> = new EventEmitter();\n  @Output() labelDeactivate: EventEmitter<any> = new EventEmitter();\n\n  legendEntries: any[] = [];\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cd.markForCheck();\n    this.legendEntries = this.getLegendEntries();\n  }\n\n  getLegendEntries(): any[] {\n    const items = [];\n\n    for (const label of this.data) {\n      const formattedLabel = formatLabel(label);\n\n      const idx = items.findIndex(i => {\n        return i.label === formattedLabel;\n      });\n\n      if (idx === -1) {\n        items.push({\n          label,\n          formattedLabel,\n          color: this.colors.getColor(label)\n        });\n      }\n    }\n\n    return items;\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.label === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activate(item) {\n    this.labelActivate.emit(item);\n  }\n\n  deactivate(item) {\n    this.labelDeactivate.emit(item);\n  }\n\n  trackBy(index, item): string {\n    return item.label;\n  }\n}\n","import { Component, Input, Output, ChangeDetectionStrategy, HostListener, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'ngx-charts-legend-entry',\n  template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendEntryComponent {\n  @Input() color: string;\n  @Input() label: any;\n  @Input() formattedLabel: string;\n  @Input() isActive: boolean = false;\n\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\n\n  get trimmedLabel(): string {\n    return this.formattedLabel || '(empty)';\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit({ name: this.label });\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit({ name: this.label });\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'ngx-charts-scale-legend',\n  template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./scale-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ScaleLegendComponent implements OnChanges {\n  @Input() valueRange;\n  @Input() colors;\n  @Input() height;\n  @Input() width;\n  @Input() horizontal = false;\n\n  gradient: any;\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n    const direction = this.horizontal ? 'right' : 'bottom';\n    this.gradient = this.sanitizer.bypassSecurityTrustStyle(`linear-gradient(to ${direction}, ${gradientValues})`);\n  }\n\n  /**\n   * Generates the string used in the gradient stylesheet properties\n   * @param colors array of colors\n   * @param splits array of splits on a scale of (0, 1)\n   */\n  gradientString(colors, splits): string {\n    // add the 100%\n    splits.push(1);\n    const pairs = [];\n    colors.reverse().forEach((c, i) => {\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n    });\n\n    return pairs.join(', ');\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { formatLabel } from '../label.helper';\n\n@Component({\n  selector: 'ngx-charts-advanced-legend',\n  template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./advanced-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedLegendComponent implements OnChanges {\n  @Input() width: number;\n  @Input() data;\n  @Input() colors;\n  @Input() label: string = 'Total';\n  @Input() animations: boolean = true;\n\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  legendItems: any[] = [];\n  total: number;\n  roundedTotal: number;\n\n  @Input() valueFormatting: (value: number) => any;\n  @Input() labelFormatting: (value: string) => any = label => label;\n  @Input() percentageFormatting: (value: number) => any = percentage => percentage;\n\n  defaultValueFormatting: (value: number) => any = value => value.toLocaleString();\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getTotal(): number {\n    return this.data.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  update(): void {\n    this.total = this.getTotal();\n    this.roundedTotal = this.total;\n\n    this.legendItems = this.getLegendItems();\n  }\n\n  getLegendItems(): any {\n    return this.data.map(d => {\n      const label = formatLabel(d.name);\n      const value = d.value;\n      const color = this.colors.getColor(label);\n      const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n\n      return {\n        _value: value,\n        data: d,\n        value,\n        color,\n        label: formattedLabel,\n        displayLabel: trimLabel(formattedLabel, 20),\n        origialLabel: d.name,\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n      };\n    });\n  }\n\n  trackBy(item) {\n    return item.formattedLabel;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ChartComponent } from './charts/chart.component';\nimport { BaseChartComponent } from './base-chart.component';\nimport { AxesModule } from './axes/axes.module';\nimport { TooltipModule } from './tooltip/tooltip.module';\nimport { CircleSeriesComponent } from './circle-series.component';\nimport { CircleComponent } from './circle.component';\nimport { GridPanelComponent } from './grid-panel.component';\nimport { GridPanelSeriesComponent } from './grid-panel-series.component';\nimport { SvgLinearGradientComponent } from './svg-linear-gradient.component';\nimport { SvgRadialGradientComponent } from './svg-radial-gradient.component';\nimport { AreaComponent } from './area.component';\nimport { CountUpDirective } from './count/count.directive';\nimport { TooltipArea } from './tooltip-area.component';\nimport { Timeline } from './timeline/timeline.component';\nimport { VisibilityObserver } from '../utils/visibility-observer';\nimport { LegendComponent } from './legend/legend.component';\nimport { LegendEntryComponent } from './legend/legend-entry.component';\nimport { ScaleLegendComponent } from './legend/scale-legend.component';\nimport { AdvancedLegendComponent } from './legend/advanced-legend.component';\n\nconst COMPONENTS = [\n  AreaComponent,\n  BaseChartComponent,\n  CountUpDirective,\n  TooltipArea,\n  ChartComponent,\n  LegendComponent,\n  LegendEntryComponent,\n  ScaleLegendComponent,\n  CircleComponent,\n  CircleSeriesComponent,\n  GridPanelComponent,\n  GridPanelSeriesComponent,\n  SvgLinearGradientComponent,\n  SvgRadialGradientComponent,\n  Timeline,\n  AdvancedLegendComponent\n];\n\n@NgModule({\n  imports: [CommonModule, AxesModule, TooltipModule],\n  declarations: [...COMPONENTS, VisibilityObserver],\n  exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n})\nexport class ChartCommonModule {}\n","export interface ViewDimensions {\n  width: number;\n  height: number;\n  xOffset: number;\n}\n\nexport function calculateViewDimensions({\n  width,\n  height,\n  margins,\n  showXAxis = false,\n  showYAxis = false,\n  xAxisHeight = 0,\n  yAxisWidth = 0,\n  showXLabel = false,\n  showYLabel = false,\n  showLegend = false,\n  legendType = 'ordinal',\n  legendPosition = 'right',\n  columns = 12\n}): ViewDimensions {\n  let xOffset = margins[3];\n  let chartWidth = width;\n  let chartHeight = height - margins[0] - margins[2];\n\n  if (showLegend && legendPosition === 'right') {\n    if (legendType === 'ordinal') {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n\n  chartWidth = (chartWidth * columns) / 12;\n\n  chartWidth = chartWidth - margins[1] - margins[3];\n\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartWidth -= offset;\n      xOffset += offset;\n    }\n  }\n\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset)\n  };\n}\n","export let colorSets = [\n  {\n    name: 'vivid',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#647c8a',\n      '#3f51b5',\n      '#2196f3',\n      '#00b862',\n      '#afdf0a',\n      '#a7b61a',\n      '#f3e562',\n      '#ff9800',\n      '#ff5722',\n      '#ff4514'\n    ]\n  },\n  {\n    name: 'natural',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#bf9d76',\n      '#e99450',\n      '#d89f59',\n      '#f2dfa7',\n      '#a5d7c6',\n      '#7794b1',\n      '#afafaf',\n      '#707160',\n      '#ba9383',\n      '#d9d5c3'\n    ]\n  },\n  {\n    name: 'cool',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#a8385d',\n      '#7aa3e5',\n      '#a27ea8',\n      '#aae3f5',\n      '#adcded',\n      '#a95963',\n      '#8796c0',\n      '#7ed3ed',\n      '#50abcc',\n      '#ad6886'\n    ]\n  },\n  {\n    name: 'fire',\n    selectable: true,\n    group: 'Ordinal',\n    domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n  },\n  {\n    name: 'solar',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#fff8e1',\n      '#ffecb3',\n      '#ffe082',\n      '#ffd54f',\n      '#ffca28',\n      '#ffc107',\n      '#ffb300',\n      '#ffa000',\n      '#ff8f00',\n      '#ff6f00'\n    ]\n  },\n  {\n    name: 'air',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#e1f5fe',\n      '#b3e5fc',\n      '#81d4fa',\n      '#4fc3f7',\n      '#29b6f6',\n      '#03a9f4',\n      '#039be5',\n      '#0288d1',\n      '#0277bd',\n      '#01579b'\n    ]\n  },\n  {\n    name: 'aqua',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#e0f7fa',\n      '#b2ebf2',\n      '#80deea',\n      '#4dd0e1',\n      '#26c6da',\n      '#00bcd4',\n      '#00acc1',\n      '#0097a7',\n      '#00838f',\n      '#006064'\n    ]\n  },\n  {\n    name: 'flame',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#A10A28',\n      '#D3342D',\n      '#EF6D49',\n      '#FAAD67',\n      '#FDDE90',\n      '#DBED91',\n      '#A9D770',\n      '#6CBA67',\n      '#2C9653',\n      '#146738'\n    ]\n  },\n  {\n    name: 'ocean',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#1D68FB',\n      '#33C0FC',\n      '#4AFFFE',\n      '#AFFFFF',\n      '#FFFC63',\n      '#FDBD2D',\n      '#FC8A25',\n      '#FA4F1E',\n      '#FA141B',\n      '#BA38D1'\n    ]\n  },\n  {\n    name: 'forest',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#55C22D',\n      '#C1F33D',\n      '#3CC099',\n      '#AFFFFF',\n      '#8CFC9D',\n      '#76CFFA',\n      '#BA60FB',\n      '#EE6490',\n      '#C42A1C',\n      '#FC9F32'\n    ]\n  },\n  {\n    name: 'horizon',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#2597FB',\n      '#65EBFD',\n      '#99FDD0',\n      '#FCEE4B',\n      '#FEFCFA',\n      '#FDD6E3',\n      '#FCB1A8',\n      '#EF6F7B',\n      '#CB96E8',\n      '#EFDEE0'\n    ]\n  },\n  {\n    name: 'neons',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#FF3333',\n      '#FF33FF',\n      '#CC33FF',\n      '#0000FF',\n      '#33CCFF',\n      '#33FFFF',\n      '#33FF66',\n      '#CCFF33',\n      '#FFCC00',\n      '#FF6600'\n    ]\n  },\n  {\n    name: 'picnic',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#FAC51D',\n      '#66BD6D',\n      '#FAA026',\n      '#29BB9C',\n      '#E96B56',\n      '#55ACD2',\n      '#B7332F',\n      '#2C83C9',\n      '#9166B8',\n      '#92E7E8'\n    ]\n  },\n  {\n    name: 'night',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#2B1B5A',\n      '#501356',\n      '#183356',\n      '#28203F',\n      '#391B3C',\n      '#1E2B3C',\n      '#120634',\n      '#2D0432',\n      '#051932',\n      '#453080',\n      '#75267D',\n      '#2C507D',\n      '#4B3880',\n      '#752F7D',\n      '#35547D'\n    ]\n  },\n  {\n    name: 'nightLights',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#4e31a5',\n      '#9c25a7',\n      '#3065ab',\n      '#57468b',\n      '#904497',\n      '#46648b',\n      '#32118d',\n      '#a00fb3',\n      '#1052a2',\n      '#6e51bd',\n      '#b63cc3',\n      '#6c97cb',\n      '#8671c1',\n      '#b455be',\n      '#7496c3'\n    ]\n  }\n];\n","import { range } from 'd3-array';\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleQuantile } from 'd3-scale';\n\nimport { colorSets } from '../utils/color-sets';\n\nexport class ColorHelper {\n  scale: any;\n  scaleType: any;\n  colorDomain: any[];\n  domain: any;\n  customColors: any;\n\n  constructor(scheme, type, domain, customColors?) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    this.colorDomain = scheme.domain;\n    this.scaleType = type;\n    this.domain = domain;\n    this.customColors = customColors;\n\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\n  }\n\n  generateColorScheme(scheme, type, domain) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    let colorScale;\n    if (type === 'quantile') {\n      colorScale = scaleQuantile().range(scheme.domain).domain(domain);\n    } else if (type === 'ordinal') {\n      colorScale = scaleOrdinal().range(scheme.domain).domain(domain);\n    } else if (type === 'linear') {\n      // linear schemes must have at least 2 colors\n      const colorDomain = [...scheme.domain];\n      if (colorDomain.length === 1) {\n        colorDomain.push(colorDomain[0]);\n        this.colorDomain = colorDomain;\n      }\n\n      const points = range(0, 1, 1.0 / colorDomain.length);\n      colorScale = scaleLinear().domain(points).range(colorDomain);\n    }\n\n    return colorScale;\n  }\n\n  getColor(value) {\n    if (value === undefined || value === null) {\n      throw new Error('Value can not be null');\n    }\n    if (this.scaleType === 'linear') {\n      const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n\n      return this.scale(valueScale(value));\n    } else {\n      if (typeof this.customColors === 'function') {\n        return this.customColors(value);\n      }\n\n      const formattedValue = value.toString();\n      let found: any; // todo type customColors\n      if (this.customColors && this.customColors.length > 0) {\n        found = this.customColors.find(mapping => {\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n        });\n      }\n\n      if (found) {\n        return found.value;\n      } else {\n        return this.scale(value);\n      }\n    }\n  }\n\n  getLinearGradientStops(value, start) {\n    if (start === undefined) {\n      start = this.domain[0];\n    }\n\n    const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n\n    const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n\n    const endColor = this.getColor(value);\n\n    // generate the stops\n    const startVal = valueScale(start);\n    const startColor = this.getColor(start);\n\n    const endVal = valueScale(value);\n    let i = 1;\n    let currentVal = startVal;\n    const stops = [];\n\n    stops.push({\n      color: startColor,\n      offset: startVal,\n      originalOffset: startVal,\n      opacity: 1\n    });\n\n    while (currentVal < endVal && i < this.colorDomain.length) {\n      const color = this.colorDomain[i];\n      const offset = colorValueScale(color);\n      if (offset <= startVal) {\n        i++;\n        continue;\n      }\n\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n        break;\n      }\n\n      stops.push({\n        color,\n        offset,\n        opacity: 1\n      });\n      currentVal = offset;\n      i++;\n    }\n\n    if (stops[stops.length - 1].offset < 100) {\n      stops.push({\n        color: endColor,\n        offset: endVal,\n        opacity: 1\n      });\n    }\n\n    if (endVal === startVal) {\n      stops[0].offset = 0;\n      stops[1].offset = 100;\n    } else {\n      // normalize the offsets into percentages\n      if (stops[stops.length - 1].offset !== 100) {\n        for (const s of stops) {\n          s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n        }\n      }\n    }\n\n    return stops;\n  }\n}\n","/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nexport function getUniqueXDomainValues(results: any[]): any[] {\n  const valueSet = new Set();\n  for (const result of results) {\n    for (const d of result.series) {\n      valueSet.add(d.name);\n    }\n  }\n  return Array.from(valueSet);\n}\n\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nexport function getScaleType(values: any[], checkDateType = true): string {\n  if (checkDateType) {\n    const allDates = values.every(value => value instanceof Date);\n    if (allDates) {\n      return 'time';\n    }\n  }\n\n  const allNumbers = values.every(value => typeof value === 'number');\n  if (allNumbers) {\n    return 'linear';\n  }\n\n  return 'ordinal';\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() state;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() baseValue: any = 'auto';\n  @Input() autoScale;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  clipPathId: string;\n  clipPath: string;\n  scaleType: string;\n  series: any;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n    if (this.baseValue !== 'auto') {\n      values.push(this.baseValue);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getScaleType(values): string {\n    let date = true;\n    let num = true;\n    for (const value of values) {\n      if (!this.isDate(value)) {\n        date = false;\n      }\n      if (typeof value !== 'number') {\n        num = false;\n      }\n    }\n\n    if (date) {\n      return 'time';\n    }\n\n    if (num) {\n      return 'linear';\n    }\n\n    return 'ordinal';\n  }\n\n  isDate(value): boolean {\n    if (value instanceof Date) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              normalized=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                type=\"stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            normalized=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: string;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: any[];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  tooltipAreas: any[];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n\n      let total = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n        if (d) {\n          total += d.value;\n        }\n      }\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n\n        if (total > 0) {\n          d.d0 = (d.d0 * 100) / total;\n          d.d1 = (d.d1 * 100) / total;\n        } else {\n          d.d0 = 0;\n          d.d1 = 0;\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    return [0, 100];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              stacked=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                type=\"stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            stacked=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: string;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: any[];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let sum = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          sum += d.value;\n        }\n      }\n\n      domain.push(sum);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","export function sortLinear(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    if (direction === 'asc') {\n      return a[property] - b[property];\n    } else {\n      return b[property] - a[property];\n    }\n  });\n}\n\nexport function sortByDomain(data, property, direction = 'asc', domain) {\n  return data.sort((a, b) => {\n    const aVal = a[property];\n    const bVal = b[property];\n\n    const aIdx = domain.indexOf(aVal);\n    const bIdx = domain.indexOf(bVal);\n\n    if (direction === 'asc') {\n      return aIdx - bIdx;\n    } else {\n      return bIdx - aIdx;\n    }\n  });\n}\n\nexport function sortByTime(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    const aDate = a[property].getTime();\n    const bDate = b[property].getTime();\n\n    if (direction === 'asc') {\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    } else {\n      if (aDate > bDate) return -1;\n      if (bDate > aDate) return 1;\n      return 0;\n    }\n  });\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { area } from 'd3-shape';\n\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\n\n@Component({\n  selector: 'g[ngx-charts-area-series]',\n  template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() baseValue: any = 'auto';\n  @Input() colors;\n  @Input() scaleType;\n  @Input() stacked: boolean = false;\n  @Input() normalized: boolean = false;\n  @Input() gradient;\n  @Input() curve;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  opacity: number;\n  path: string;\n  startingPath: string;\n\n  hasGradient: boolean;\n  gradientStops: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradient();\n\n    let currentArea;\n    let startingArea;\n\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    if (this.stacked || this.normalized) {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0((d, i) => this.yScale(d.d0))\n        .y1((d, i) => this.yScale(d.d1));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => this.yScale.range()[0])\n        .y1(d => this.yScale.range()[0]);\n    } else {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => this.yScale(d.value));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\n    }\n\n    currentArea.curve(this.curve);\n    startingArea.curve(this.curve);\n\n    this.opacity = 0.8;\n\n    let data = this.data.series;\n    if (this.scaleType === 'linear') {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    this.path = currentArea(data);\n    this.startingPath = startingArea(data);\n  }\n\n  updateGradient() {\n    if (this.colors.scaleType === 'linear') {\n      this.hasGradient = true;\n      if (this.stacked || this.normalized) {\n        const d0values = this.data.series.map(d => d.d0);\n        const d1values = this.data.series.map(d => d.d1);\n        const max = Math.max(...d1values);\n        const min = Math.min(...d0values);\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      } else {\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        this.gradientStops = this.colors.getLinearGradientStops(max);\n      }\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AreaChartComponent } from './area-chart.component';\nimport { AreaChartNormalizedComponent } from './area-chart-normalized.component';\nimport { AreaChartStackedComponent } from './area-chart-stacked.component';\nimport { AreaSeriesComponent } from './area-series.component';\nimport { ChartCommonModule } from '../common/chart-common.module';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n  exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n})\nexport class AreaChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { roundedRect } from '../common/shape.helper';\nimport { id } from '../utils/id';\n\n/* tslint:disable-next-line */\nimport { transition } from 'd3-transition';\n\n@Component({\n  selector: 'g[ngx-charts-bar]',\n  template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarComponent implements OnChanges {\n  @Input() fill;\n  @Input() data: any;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() x: number;\n  @Input() y: number;\n  @Input() orientation;\n  @Input() roundEdges: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() offset = 0;\n  @Input() isActive: boolean = false;\n  @Input() stops: any[];\n  @Input() animations: boolean = true;\n  @Input() ariaLabel: string;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: any;\n  path: any;\n  gradientId: any;\n  gradientFill: any;\n  startOpacity: any;\n  gradientStops: any[];\n  hasGradient: boolean = false;\n  hideBar: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.roundEdges) {\n      this.loadAnimation();\n    }\n    this.update();\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n    this.checkToHideBar();\n  }\n\n  loadAnimation(): void {\n    this.path = this.getStartingPath();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.bar');\n    const path = this.getPath();\n    if (this.animations) {\n      node.transition().duration(500).attr('d', path);\n    } else {\n      node.attr('d', path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.getStartOpacity()\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    } else {\n      if (this.orientation === 'vertical') {\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    }\n\n    return path;\n  }\n\n  getPath() {\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      }\n    } else {\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n    }\n\n    return path;\n  }\n\n  getRadius(): number {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getStartOpacity(): number {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges() {\n    let edges = [false, false, false, false];\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        if (this.data.value > 0) {\n          edges = [true, true, false, false];\n        } else {\n          edges = [false, false, true, true];\n        }\n      } else if (this.orientation === 'horizontal') {\n        if (this.data.value > 0) {\n          edges = [false, true, false, true];\n        } else {\n          edges = [true, false, true, false];\n        }\n      }\n    }\n    return edges;\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  private checkToHideBar() {\n    this.hideBar =\n      this.noBarWhenZero &&\n      ((this.orientation === 'vertical' && this.height === 0) ||\n        (this.orientation === 'horizontal' && this.width === 0));\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarHorizontalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() xScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yScale: any;\n  xScale: any;\n  xDomain: any;\n  yDomain: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n  }\n\n  getXDomain(): any[] {\n    const values = this.results.map(d => d.value);\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n    return [min, max];\n  }\n\n  getYDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.yDomain;\n    } else {\n      domain = this.xDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          orient=\"horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [xScale]=\"valueScale\"\n            [activeEntries]=\"activeEntries\"\n            [yScale]=\"innerScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontal2DComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding = 16;\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valuesDomain: any[];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valuesDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.height])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const height = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valuesDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.groupScale(group.label)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valuesDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valuesDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            type=\"normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    return [0, 100];\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            type=\"stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [activeEntries]=\"activeEntries\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarVerticalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() yScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xScale: any;\n  yScale: any;\n  xDomain: any;\n  yDomain: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: any[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getXDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  getYDomain(): [number, number] {\n    const values = this.results.map(d => d.value);\n\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      min = Math.min(min, ...this.yAxisTicks);\n    }\n\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      max = Math.max(max, ...this.yAxisTicks);\n    }\n    return [min, max];\n  }\n\n  onClick(data: DataItem) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.xDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxHeightChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          orient=\"vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVertical2DComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() scaleType = 'ordinal';\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding = 16;\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valuesDomain: any[];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valuesDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.width])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const width = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valuesDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(${this.groupScale(group.label)}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valuesDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valuesDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            type=\"normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    return [0, 100];\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name)}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\n\nexport enum D0Types {\n  positive = 'positive',\n  negative = 'negative'\n}\n\n@Component({\n  selector: 'g[ngx-charts-series-vertical]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"'vertical'\"\n      [roundEdges]=\"bar.roundEdges\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [isActive]=\"isActive(bar.data)\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n      [animations]=\"animations\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"'vertical'\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesVerticalComponent implements OnChanges {\n  @Input() dims;\n  @Input() type = 'standard';\n  @Input() series;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() seriesName: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelHeightChanged = new EventEmitter();\n\n  tooltipPlacement: string;\n  tooltipType: string;\n\n  bars: any;\n  x: any;\n  y: any;\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  ngOnChanges(changes): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    let width;\n    if (this.series.length) {\n      width = this.xScale.bandwidth();\n    }\n    width = Math.round(width);\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type = D0Types.positive;\n\n    let total;\n    if (this.type === 'normalized') {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        width,\n        formattedLabel,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n\n      if (this.type === 'standard') {\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n        bar.x = this.xScale(label);\n\n        if (value < 0) {\n          bar.y = this.yScale(0);\n        } else {\n          bar.y = this.yScale(value);\n        }\n      } else if (this.type === 'stacked') {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === 'normalized') {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === 'ordinal') {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === 'standard') {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\n        }</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === 'stacked') {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      if (section.total > 0) {\n        section.height = this.yScale(totalPositive);\n      } else {\n        section.height = this.yScale(totalNegative);\n      }\n      section.width = this.xScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ? this.seriesName : d.label;\n        section.total = d.value;\n        section.x = this.xScale(d.label);\n        section.y = this.yScale(0);\n        section.height = this.yScale(section.total) - this.yScale(0);\n        section.width = this.xScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  getLabel(dataItem): string {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index, bar): string {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            type=\"stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  tickFormatting: (label: string) => string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { D0Types } from './series-vertical.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'g[ngx-charts-series-horizontal]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"'horizontal'\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"'horizontal'\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesHorizontal implements OnChanges {\n  bars: any;\n  x: any;\n  y: any;\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  @Input() dims;\n  @Input() type = 'standard';\n  @Input() series;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() seriesName: string;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelWidthChanged = new EventEmitter();\n\n  tooltipPlacement: string;\n  tooltipType: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type: D0Types;\n    d0Type = D0Types.positive;\n    let total;\n    if (this.type === 'normalized') {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        formattedLabel\n      };\n\n      bar.height = this.yScale.bandwidth();\n\n      if (this.type === 'standard') {\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n        if (value < 0) {\n          bar.x = this.xScale(value);\n        } else {\n          bar.x = this.xScale(xScaleMin);\n        }\n        bar.y = this.yScale(label);\n      } else if (this.type === 'stacked') {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === 'normalized') {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === 'ordinal') {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === 'standard') {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\n        }</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === 'stacked') {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      // if total is positive then we show it on the right, otherwise on the left\n      if (section.total > 0) {\n        section.width = this.xScale(totalPositive);\n      } else {\n        section.width = this.xScale(totalNegative);\n      }\n      section.height = this.yScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ? this.seriesName : d.label;\n        section.total = d.value;\n        section.x = this.xScale(0);\n        section.y = this.yScale(d.label);\n        section.width = this.xScale(section.total) - this.xScale(0);\n        section.height = this.yScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  getLabel(dataItem): string {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index, bar) {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n  click(data: DataItem): void {\n    this.select.emit(data);\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { formatLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-bar-label]',\n  template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `,\n  styleUrls: ['./bar-label.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarLabelComponent implements OnChanges {\n  @Input() value;\n  @Input() valueFormatting: any;\n  @Input() barX;\n  @Input() barY;\n  @Input() barWidth;\n  @Input() barHeight;\n  @Input() orientation;\n\n  @Output() dimensionsChanged: EventEmitter<any> = new EventEmitter();\n\n  element: any;\n  x: number;\n  y: number;\n  horizontalPadding: number = 2;\n  verticalPadding: number = 5;\n  formatedValue: string;\n  transform: string;\n  textAnchor: string;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getSize(): any {\n    const h = this.element.getBoundingClientRect().height;\n    const w = this.element.getBoundingClientRect().width;\n    return { height: h, width: w, negative: this.value < 0 };\n  }\n\n  ngAfterViewInit() {\n    this.dimensionsChanged.emit(this.getSize());\n  }\n\n  update(): void {\n    if (this.valueFormatting) {\n      this.formatedValue = this.valueFormatting(this.value);\n    } else {\n      this.formatedValue = formatLabel(this.value);\n    }\n\n    if (this.orientation === 'horizontal') {\n      this.x = this.barX + this.barWidth;\n      // if the value is negative then it's on the left of the x0.\n      // we need to put the data label in front of the bar\n      if (this.value < 0) {\n        this.x = this.x - this.horizontalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.x = this.x + this.horizontalPadding;\n        this.textAnchor = 'start';\n      }\n      this.y = this.barY + this.barHeight / 2;\n    } else {\n      // orientation must be \"vertical\"\n      this.x = this.barX + this.barWidth / 2;\n      this.y = this.barY + this.barHeight;\n\n      if (this.value < 0) {\n        this.y = this.y + this.verticalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.y = this.y - this.verticalPadding;\n        this.textAnchor = 'start';\n      }\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BarComponent } from './bar.component';\nimport { BarHorizontalComponent } from './bar-horizontal.component';\nimport { BarHorizontal2DComponent } from './bar-horizontal-2d.component';\nimport { BarHorizontalNormalizedComponent } from './bar-horizontal-normalized.component';\nimport { BarHorizontalStackedComponent } from './bar-horizontal-stacked.component';\nimport { BarVerticalComponent } from './bar-vertical.component';\nimport { BarVertical2DComponent } from './bar-vertical-2d.component';\nimport { BarVerticalNormalizedComponent } from './bar-vertical-normalized.component';\nimport { BarVerticalStackedComponent } from './bar-vertical-stacked.component';\nimport { SeriesHorizontal } from './series-horizontal.component';\nimport { SeriesVerticalComponent } from './series-vertical.component';\nimport { BarLabelComponent } from './bar-label.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ],\n  exports: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ]\n})\nexport class BarChartModule {}\n","import { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\n\nexport function getDomain(values, scaleType, autoScale, minVal?, maxVal?): number[] {\n  let domain: number[] = [];\n  if (scaleType === 'linear') {\n    values = values.map(v => Number(v));\n    if (!autoScale) {\n      values.push(0);\n    }\n  }\n\n  if (scaleType === 'time' || scaleType === 'linear') {\n    const min = minVal ? minVal : Math.min(...values);\n    const max = maxVal ? maxVal : Math.max(...values);\n\n    domain = [min, max];\n  } else {\n    domain = values;\n  }\n\n  return domain;\n}\n\nexport function getScale(domain, range: number[], scaleType, roundDomains): any {\n  let scale: any;\n\n  if (scaleType === 'time') {\n    scale = scaleTime().range(range).domain(domain);\n  } else if (scaleType === 'linear') {\n    scale = scaleLinear().range(range).domain(domain);\n\n    if (roundDomains) {\n      scale = scale.nice();\n    }\n  } else if (scaleType === 'ordinal') {\n    scale = scalePoint().range([range[0], range[1]]).domain(domain);\n  }\n\n  return scale;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\nimport { getDomain, getScale } from './bubble-chart.utils';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'ngx-charts-bubble-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class BubbleChartComponent extends BaseChartComponent {\n  @Input() showGridLines: boolean = true;\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis: boolean = true;\n  @Input() yAxis: boolean = true;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() maxRadius = 10;\n  @Input() minRadius = 3;\n  @Input() autoScale: boolean;\n  @Input() schemeType = 'ordinal';\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: any;\n  @Input() yScaleMax: any;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  colors: ColorHelper;\n  scaleType = 'linear';\n  margin = [10, 20, 10, 20];\n  bubblePadding = [0, 0, 0, 0];\n  data: any;\n\n  legendOptions: any;\n  transform: string;\n\n  clipPath: string;\n  clipPathId: string;\n\n  seriesDomain: any[];\n  xDomain: any[];\n  yDomain: any[];\n  rDomain: number[];\n\n  xScaleType: string;\n  yScaleType: string;\n\n  yScale: any;\n  xScale: any;\n  rScale: any;\n\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n\n  activeEntries: any[] = [];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.seriesDomain = this.results.map(d => d.name);\n    this.rDomain = this.getRDomain();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n\n    const colorDomain = this.schemeType === 'ordinal' ? this.seriesDomain : this.rDomain;\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n\n    this.data = this.results;\n\n    this.minRadius = Math.max(this.minRadius, 1);\n    this.maxRadius = Math.max(this.maxRadius, 1);\n\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n\n    this.bubblePadding = [0, 0, 0, 0];\n    this.setScales();\n\n    this.bubblePadding = this.getBubblePadding();\n    this.setScales();\n\n    this.legendOptions = this.getLegendOptions();\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  getBubblePadding() {\n    let yMin = 0;\n    let xMin = 0;\n    let yMax = this.dims.height;\n    let xMax = this.dims.width;\n\n    for (const s of this.data) {\n      for (const d of s.series) {\n        const r = this.rScale(d.r);\n        const cx = this.xScaleType === 'linear' ? this.xScale(Number(d.x)) : this.xScale(d.x);\n        const cy = this.yScaleType === 'linear' ? this.yScale(Number(d.y)) : this.yScale(d.y);\n        xMin = Math.max(r - cx, xMin);\n        yMin = Math.max(r - cy, yMin);\n        yMax = Math.max(cy + r, yMax);\n        xMax = Math.max(cx + r, xMax);\n      }\n    }\n\n    xMax = Math.max(xMax - this.dims.width, 0);\n    yMax = Math.max(yMax - this.dims.height, 0);\n\n    return [yMin, xMax, yMax, xMin];\n  }\n\n  setScales() {\n    let width = this.dims.width;\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n      width = width - this.bubblePadding[1];\n    }\n    let height = this.dims.height;\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n      height = height - this.bubblePadding[2];\n    }\n    this.xScale = this.getXScale(this.xDomain, width);\n    this.yScale = this.getYScale(this.yDomain, height);\n  }\n\n  getYScale(domain, height): any {\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n  }\n\n  getXScale(domain, width): any {\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n  }\n\n  getRScale(domain, range): any {\n    const scale = scaleLinear().range(range).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getLegendOptions(): any {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      position: this.legendPosition,\n      title: undefined\n    };\n\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.rDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  getXDomain(): any[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.x)) {\n          values.push(d.x);\n        }\n      }\n    }\n\n    this.xScaleType = getScaleType(values);\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n  }\n\n  getYDomain(): any[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.y)) {\n          values.push(d.y);\n        }\n      }\n    }\n\n    this.yScaleType = getScaleType(values);\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n  }\n\n  getRDomain(): number[] {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        const value = Number(d.r) || 1;\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    }\n\n    return [min, max];\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-bubble-series]',\n  template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"'top'\"\n          [tooltipType]=\"'tooltip'\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0,\n          transform: 'scale(0)'\n        }),\n        animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n      ])\n    ])\n  ]\n})\nexport class BubbleSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() rScale;\n  @Input() xScaleType;\n  @Input() yScaleType;\n  @Input() colors;\n  @Input() visibleValue;\n  @Input() activeEntries: any[];\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  areaPath: any;\n  circles: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circles = this.getCircles();\n  }\n\n  getCircles(): any[] {\n    const seriesName = this.data.name;\n\n    return this.data.series\n      .map((d, i) => {\n        if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n          const y = d.y;\n          const x = d.x;\n          const r = d.r;\n\n          const radius = this.rScale(r || 1);\n          const tooltipLabel = formatLabel(d.name);\n\n          const cx = this.xScaleType === 'linear' ? this.xScale(Number(x)) : this.xScale(x);\n          const cy = this.yScaleType === 'linear' ? this.yScale(Number(y)) : this.yScale(y);\n\n          const color = this.colors.scaleType === 'linear' ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n\n          const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\n          const opacity = isActive ? 1 : 0.3;\n\n          const data = Object.assign({}, d, {\n            series: seriesName,\n            name: d.name,\n            value: d.y,\n            x: d.x,\n            radius: d.r\n          });\n\n          return {\n            data,\n            x,\n            y,\n            r,\n            classNames: [`circle-data-${i}`],\n            value: y,\n            label: x,\n            cx,\n            cy,\n            radius,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            isActive,\n            transform: `translate(${cx},${cy})`\n          };\n        }\n      })\n      .filter(circle => circle !== undefined);\n  }\n\n  getTooltipText(circle): string {\n    const hasRadius = typeof circle.r !== 'undefined';\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\n\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n    const x = formatLabel(circle.x);\n    const y = formatLabel(circle.y);\n    const name =\n      hasSeriesName && hasTooltipLabel\n        ? `${circle.seriesName} • ${circle.tooltipLabel}`\n        : circle.seriesName + circle.tooltipLabel;\n    const tooltipTitle =\n      hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n\n    return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isVisible(circle): boolean {\n    if (this.activeEntries.length > 0) {\n      return this.isActive({ name: circle.seriesName });\n    }\n\n    return circle.opacity !== 0;\n  }\n\n  activateCircle(circle): void {\n    circle.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(circle): void {\n    circle.barVisible = false;\n    this.deactivate.emit({ name: this.data.name });\n  }\n\n  trackBy(index, circle): string {\n    return `${circle.data.series} ${circle.data.name}`;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BubbleChartComponent } from './bubble-chart.component';\nimport { BubbleSeriesComponent } from './bubble-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [BubbleChartComponent, BubbleSeriesComponent],\n  exports: [BubbleChartComponent, BubbleSeriesComponent]\n})\nexport class BubbleChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\nimport { select } from 'd3-selection';\n\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        style=\"cursor: pointer\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatMapCellComponent implements OnChanges {\n  @Input() fill;\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() data;\n  @Input() label;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: HTMLElement;\n  transform: string;\n  activeRange: any[];\n  startOpacity: number;\n  gradientId: string;\n  gradientUrl: string;\n  gradientStops: any[];\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.transform = `translate(${this.x} , ${this.y})`;\n\n    this.startOpacity = 0.3;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n\n    if (this.animations) {\n      this.loadAnimation();\n    }\n  }\n\n  getGradientStops() {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0);\n    this.animateToCurrentForm();\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    node.transition().duration(750).attr('opacity', 1);\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatCellSeriesComponent implements OnChanges, OnInit {\n  @Input() data;\n  @Input() colors;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() gradient: boolean;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  cells: any[];\n\n  ngOnInit() {\n    if (!this.tooltipText) {\n      this.tooltipText = this.getTooltipText;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cells = this.getCells();\n  }\n\n  getCells() {\n    const cells = [];\n\n    this.data.map(row => {\n      row.series.map(cell => {\n        const value = cell.value;\n        cell.series = row.name;\n\n        cells.push({\n          row,\n          cell,\n          x: this.xScale(row.name),\n          y: this.yScale(cell.name),\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: this.colors.getColor(value),\n          data: value,\n          label: formatLabel(cell.name),\n          series: row.name\n        });\n      });\n    });\n\n    return cells;\n  }\n\n  getTooltipText({ label, data, series }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n  }\n\n  trackBy(index, item): string {\n    return item.tooltipText;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { scaleBand } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-heat-map',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class HeatMapComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() gradient: boolean;\n  @Input() innerPadding: number | number[] = 8;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() min: any;\n  @Input() max: any;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xDomain: any[];\n  yDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  color: any;\n  colors: ColorHelper;\n  colorScale: any;\n  transform: string;\n  rects: any[];\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  scaleType: string = 'linear';\n\n  update(): void {\n    super.update();\n\n    this.formatDates();\n\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.scaleType = getScaleType(this.valueDomain, false);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.scaleType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.scaleType === 'linear') {\n      let min = this.min;\n      let max = this.max;\n      if (!this.min) {\n        min = Math.min(0, ...this.valueDomain);\n      }\n      if (!this.max) {\n        max = Math.max(...this.valueDomain);\n      }\n      this.valueDomain = [min, max];\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.rects = this.getRects();\n  }\n\n  getXDomain(): any {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.name)) {\n        domain.push(group.name);\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.name)) {\n          domain.push(d.name);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  /**\n   * Converts the input to gap paddingInner in fraction\n   * Supports the following inputs:\n   *    Numbers: 8\n   *    Strings: \"8\", \"8px\", \"8%\"\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n   *\n   * @memberOf HeatMapComponent\n   */\n  getDimension(value: string | number | Array<string | number>, index = 0, N: number, L: number): number {\n    if (typeof value === 'string') {\n      value = value\n        .replace('[', '')\n        .replace(']', '')\n        .replace('px', '')\n        // tslint:disable-next-line: quotemark\n        .replace(\"'\", '');\n\n      if (value.includes(',')) {\n        value = value.split(',');\n      }\n    }\n    if (Array.isArray(value) && typeof index === 'number') {\n      return this.getDimension(value[index], null, N, L);\n    }\n    if (typeof value === 'string' && value.includes('%')) {\n      return +value.replace('%', '') / 100;\n    }\n    return N / (L / +value + 1);\n  }\n\n  getXScale(): any {\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n    return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n  }\n\n  getYScale(): any {\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n    return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n  }\n\n  getRects(): any[] {\n    const rects = [];\n\n    this.xDomain.map(xVal => {\n      this.yDomain.map(yVal => {\n        rects.push({\n          x: this.xScale(xVal),\n          y: this.yScale(yVal),\n          rx: 3,\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: 'rgba(200,200,200,0.03)'\n        });\n      });\n    });\n\n    return rects;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: this.scaleType,\n      domain: this.valueDomain,\n      colors: this.scaleType === 'ordinal' ? this.colors : this.colors.scale,\n      title: this.scaleType === 'ordinal' ? this.legendTitle : undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { HeatMapCellComponent } from './heat-map-cell.component';\nimport { HeatCellSeriesComponent } from './heat-map-cell-series.component';\nimport { HeatMapComponent } from './heat-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n  exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n})\nexport class HeatMapModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ChangeDetectionStrategy,\n  SimpleChanges\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { select } from 'd3-selection';\n\n@Component({\n  selector: 'g[ngx-charts-line]',\n  template: `\n    <svg:path\n      [@animationState]=\"'active'\"\n      class=\"line\"\n      [attr.d]=\"initialPath\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      stroke-width=\"1.5px\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          strokeDasharray: 2000,\n          strokeDashoffset: 2000\n        }),\n        animate(\n          1000,\n          style({\n            strokeDashoffset: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineComponent implements OnChanges {\n  @Input() path;\n  @Input() stroke;\n  @Input() data;\n  @Input() fill: string = 'none';\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  initialized: boolean = false;\n  initialPath: string;\n\n  constructor(private element: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.initialPath = this.path;\n    } else {\n      this.updatePathEl();\n    }\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element.nativeElement).select('.line');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-line-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-line-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [hasRange]=\"hasRange\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineChartComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() autoScale;\n  @Input() timeline;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() rangeFillOpacity: number;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showRefLines: boolean = false;\n  @Input() referenceLines: any;\n  @Input() showRefLabels: boolean = true;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  yScale: any;\n  xScale: any;\n  colors: ColorHelper;\n  scaleType: string;\n  transform: string;\n  clipPath: string;\n  clipPathId: string;\n  series: any;\n  areaPath: any;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  hasRange: boolean; // whether the line has a min-max range around it\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime().range([0, width]).domain(domain);\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear().range([0, width]).domain(domain);\n\n      if (this.roundDomains) {\n        scale = scale.nice();\n      }\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n    }\n\n    return scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    this.deactivateAll();\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { area, line } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\n\n@Component({\n  selector: 'g[ngx-charts-line-series]',\n  template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          orientation=\"vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LineSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() scaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() hasRange: boolean;\n  @Input() animations: boolean = true;\n\n  path: string;\n  outerPath: string;\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: any[];\n  areaGradientStops: any[];\n  stroke: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const data = this.sortData(this.data.series);\n\n    const lineGen = this.getLineGenerator();\n    this.path = lineGen(data) || '';\n\n    const areaGen = this.getAreaGenerator();\n    this.areaPath = areaGen(data) || '';\n\n    if (this.hasRange) {\n      const range = this.getRangeGenerator();\n      this.outerPath = range(data) || '';\n    }\n\n    if (this.hasGradient) {\n      this.stroke = this.gradientUrl;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      if (max === min) {\n        this.stroke = this.colors.getColor(max);\n      }\n    } else {\n      this.stroke = this.colors.getColor(this.data.name);\n    }\n  }\n\n  getLineGenerator(): any {\n    return line<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === 'time') {\n          value = this.xScale(label);\n        } else if (this.scaleType === 'linear') {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  getRangeGenerator(): any {\n    return area<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === 'time') {\n          value = this.xScale(label);\n        } else if (this.scaleType === 'linear') {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\n      .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\n      .curve(this.curve);\n  }\n\n  getAreaGenerator(): any {\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    return area<any>()\n      .x(xProperty)\n      .y0(() => this.yScale.range()[0])\n      .y1(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === 'linear') {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    return data;\n  }\n\n  updateGradients() {\n    if (this.colors.scaleType === 'linear') {\n      this.hasGradient = true;\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n      this.areaGradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LineComponent } from './line.component';\nimport { LineChartComponent } from './line-chart.component';\nimport { LineSeriesComponent } from './line-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n  exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n})\nexport class LineChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveCardinalClosed } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { getScaleType } from '../common/domain.helper';\nimport { isDate } from '../utils/types';\n\nconst twoPI = 2 * Math.PI;\n\n@Component({\n  selector: 'ngx-charts-polar-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"'bottom'\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: [\n    '../common/base-chart.component.scss',\n    '../pie-chart/pie-chart.component.scss',\n    './polar-chart.component.scss'\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class PolarChartComponent extends BaseChartComponent {\n  @Input() legend: boolean;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis: boolean;\n  @Input() yAxis: boolean;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() autoScale: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveCardinalClosed;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() rangeFillOpacity: number = 0.15;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: (o: any) => any;\n  @Input() yAxisTickFormatting: (o: any) => any;\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showSeriesOnHover: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() yAxisMinScale: number = 0;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yAxisDims: ViewDimensions;\n  labelOffset: number;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  yScale: any; // -> rScale\n  xScale: any; // -> tScale\n  yAxisScale: any; // -> yScale\n  colors: ColorHelper;\n  scaleType: string;\n  transform: string;\n  transformPlot: string;\n  transformYAxis: string;\n  transformXAxis: string;\n  series: any; // ???\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  thetaTicks: any[];\n  radiusTicks: number[];\n  outerRadius: number;\n\n  update(): void {\n    super.update();\n\n    this.setDims();\n\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.setTicks();\n  }\n\n  setDims() {\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    const halfWidth = Math.floor(this.dims.width / 2);\n    const halfHeight = Math.floor(this.dims.height / 2);\n\n    const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n\n    const yOffset = Math.max(0, halfHeight - outerRadius);\n\n    this.yAxisDims = {\n      ...this.dims,\n      width: halfWidth\n    };\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.transformYAxis = `translate(0, ${yOffset})`;\n    this.labelOffset = this.dims.height + 40;\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n  }\n\n  setScales() {\n    const xValues = this.getXValues();\n    this.scaleType = getScaleType(xValues);\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, twoPI);\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n  }\n\n  setTicks() {\n    let tickFormat;\n    if (this.xAxisTickFormatting) {\n      tickFormat = this.xAxisTickFormatting;\n    } else if (this.xScale.tickFormat) {\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n    } else {\n      tickFormat = d => {\n        if (isDate(d)) {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const outerRadius = this.outerRadius;\n    const s = 1.1;\n\n    this.thetaTicks = this.xDomain.map(d => {\n      const startAngle = this.xScale(d);\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n      const label = tickFormat(d);\n\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n      const pos = [dd, s * startPos[1]];\n      return {\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle: startAngle,\n        value: outerRadius,\n        label,\n        startPos,\n        pos\n      };\n    });\n\n    const minDistance = 10;\n\n    /* from pie chart, abstract out -*/\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n      const a = this.thetaTicks[i];\n\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\n        const b = this.thetaTicks[j];\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n  }\n\n  getXValues(): any[] {\n    const values = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n    return values;\n  }\n\n  getXDomain(values = this.getXValues()): any[] {\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    }\n    return values;\n  }\n\n  getYValues(): any[] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n    return domain;\n  }\n\n  getYDomain(domain = this.getYValues()): any[] {\n    let min = Math.min(...domain);\n    const max = Math.max(this.yAxisMinScale, ...domain);\n\n    min = Math.max(0, min);\n    if (!this.autoScale) {\n      min = Math.min(0, min);\n    }\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    switch (this.scaleType) {\n      case 'time':\n        return scaleTime().range([0, width]).domain(domain);\n      case 'linear':\n        const scale = scaleLinear().range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n      default:\n        return scalePoint()\n          .range([0, width - twoPI / domain.length])\n          .padding(0)\n          .domain(domain);\n    }\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([0, height]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    const domain = this.schemeType === 'ordinal' ? this.seriesDomain : this.yDomain.reverse();\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    if (this.schemeType === 'ordinal') {\n      return {\n        scaleType: this.schemeType,\n        colors: this.colors,\n        domain: this.seriesDomain,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n    return {\n      scaleType: this.schemeType,\n      colors: this.colors.scale,\n      domain: this.yDomain,\n      title: undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n}\n","export function isDate(value) {\n  return toString.call(value) === '[object Date]';\n}\n\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { lineRadial } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\nimport { escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-polar-series]',\n  template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          orientation=\"vertical\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        tooltipType=\"tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PolarSeriesComponent implements OnChanges {\n  @Input() name;\n  @Input() data;\n  @Input() xScale; // Theta\n  @Input() yScale; // R\n  @Input() colors;\n  @Input() scaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => string;\n  @Input() gradient: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  path: string;\n  circles: any[];\n  circleRadius: number = 3;\n\n  outerPath: string;\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: any[];\n  areaGradientStops: any[];\n  seriesColor: string;\n\n  active: boolean;\n  inactive: boolean;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const line = this.getLineGenerator();\n\n    const data = this.sortData(this.data.series);\n\n    const seriesName = this.data.name;\n    const linearScaleType = this.colors.scaleType === 'linear';\n    const min = this.yScale.domain()[0];\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n\n    this.path = line(data) || '';\n\n    this.circles = data.map(d => {\n      const a = this.getAngle(d);\n      const r = this.getRadius(d);\n      const value = d.value;\n\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n\n      const cData = Object.assign({}, d, {\n        series: seriesName,\n        value,\n        name: d.name\n      });\n\n      return {\n        data: cData,\n        cx: r * Math.sin(a),\n        cy: -r * Math.cos(a),\n        value,\n        color,\n        label: d.name\n      };\n    });\n\n    this.active = this.isActive(this.data);\n    this.inactive = this.isInactive(this.data);\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n  }\n\n  getAngle(d) {\n    const label = d.name;\n    if (this.scaleType === 'time') {\n      return this.xScale(label);\n    } else if (this.scaleType === 'linear') {\n      return this.xScale(Number(label));\n    }\n    return this.xScale(label);\n  }\n\n  getRadius(d) {\n    return this.yScale(d.value);\n  }\n\n  getLineGenerator(): any {\n    return lineRadial<any>()\n      .angle(d => this.getAngle(d))\n      .radius(d => this.getRadius(d))\n      .curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === 'linear') {\n      return sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      return sortByTime(data, 'name');\n    }\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n  defaultTooltipText({ label, value }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  updateGradients() {\n    this.hasGradient = this.gradient || this.colors.scaleType === 'linear';\n\n    if (!this.hasGradient) {\n      return;\n    }\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n\n    if (this.colors.scaleType === 'linear') {\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n    } else {\n      this.gradientStops = undefined;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-advanced-pie-chart',\n  template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './advanced-pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedPieChartComponent extends BaseChartComponent {\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() label: string = 'Total';\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  data: any;\n  dims: ViewDimensions;\n  domain: any[];\n  outerRadius: number;\n  innerRadius: number;\n  transform: string;\n  colors: ColorHelper;\n  legendWidth: number;\n  margin = [20, 20, 20, 20];\n\n  @Input() valueFormatting: (value: number) => any;\n  @Input() nameFormatting: (value: string) => any;\n  @Input() percentageFormatting: (value: number) => any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: (this.width * 4) / 12.0,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n    this.setColors();\n\n    const xOffset = this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n    this.innerRadius = this.outerRadius * 0.75;\n\n    this.transform = `translate(${xOffset} , ${yOffset})`;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { arc } from 'd3-shape';\n\nimport { trimLabel } from '../common/trim-label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-pie-label]',\n  template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieLabelComponent implements OnChanges {\n  @Input() data;\n  @Input() radius;\n  @Input() label;\n  @Input() color;\n  @Input() max;\n  @Input() value;\n  @Input() explodeSlices;\n  @Input() animations: boolean = true;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  trimLabel: (label: string, max?: number) => string;\n  line: string;\n\n  private readonly isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n\n  constructor() {\n    this.trimLabel = trimLabel;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    let startRadius = this.radius;\n    if (this.explodeSlices) {\n      startRadius = (this.radius * this.value) / this.max;\n    }\n\n    const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\n\n    // Calculate innerPos then scale outer position to match label position\n    const innerPos = innerArc.centroid(this.data);\n\n    let scale = this.data.pos[1] / innerPos[1];\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n      scale = 1;\n    }\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n  }\n\n  get textX(): number {\n    return this.data.pos[0];\n  }\n\n  get textY(): number {\n    return this.data.pos[1];\n  }\n\n  get styleTransform(): string {\n    return this.isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n  }\n\n  get attrTransform(): string {\n    return !this.isIE ? null : `translate(${this.textX},${this.textY})`;\n  }\n\n  get textTransition(): string {\n    return this.isIE || !this.animations ? null : 'transform 0.75s';\n  }\n\n  textAnchor(): any {\n    return this.midAngle(this.data) < Math.PI ? 'start' : 'end';\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { interpolate } from 'd3-interpolate';\nimport { select } from 'd3-selection';\nimport { arc } from 'd3-shape';\n\nimport { id } from '../utils/id';\n/* tslint:disable */\nimport { MouseEvent } from '../events';\n\n@Component({\n  selector: 'g[ngx-charts-pie-arc]',\n  template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          [color]=\"fill\"\n          orientation=\"vertical\"\n          [name]=\"radialGradientId\"\n          [startOpacity]=\"startOpacity\"\n        />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieArcComponent implements OnChanges {\n  @Input() fill;\n  @Input() startAngle: number = 0;\n  @Input() endAngle: number = Math.PI * 2;\n  @Input() innerRadius;\n  @Input() outerRadius;\n  @Input() cornerRadius: number = 0;\n  @Input() value;\n  @Input() max;\n  @Input() data;\n  @Input() explodeSlices: boolean = false;\n  @Input() gradient: boolean = false;\n  @Input() animate: boolean = true;\n  @Input() pointerEvents: boolean = true;\n  @Input() isActive: boolean = false;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  element: HTMLElement;\n  path: any;\n  startOpacity: number;\n  radialGradientId: string;\n  linearGradientId: string;\n  gradientFill: string;\n  initialized: boolean = false;\n  private _timeout;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getGradient() {\n    return this.gradient ? this.gradientFill : this.fill;\n  }\n\n  getPointerEvents() {\n    return this.pointerEvents ? 'auto' : 'none';\n  }\n\n  update(): void {\n    const calc = this.calculateArc();\n    this.startOpacity = 0.5;\n    this.radialGradientId = 'linearGrad' + id().toString();\n    this.gradientFill = `url(#${this.radialGradientId})`;\n\n    if (this.animate) {\n      if (this.initialized) {\n        this.updateAnimation();\n      } else {\n        this.loadAnimation();\n        this.initialized = true;\n      }\n    } else {\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n    }\n  }\n\n  calculateArc(): any {\n    let outerRadius = this.outerRadius;\n    if (this.explodeSlices && this.innerRadius === 0) {\n      outerRadius = (this.outerRadius * this.value) / this.max;\n    }\n\n    return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const copyOfD = Object.assign({}, d);\n        copyOfD.endAngle = copyOfD.startAngle;\n        const interpolater = interpolate(copyOfD, copyOfD);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      })\n      .transition()\n      .duration(750)\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  updateAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .duration(750)\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  onClick(): void {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n  }\n\n  onDblClick(event: MouseEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this._timeout);\n\n    this.dblclick.emit({\n      data: this.data,\n      nativeEvent: event\n    });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-pie-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieChartComponent extends BaseChartComponent {\n  @Input() labels = false;\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() explodeSlices = false;\n  @Input() doughnut = false;\n  @Input() arcWidth = 0.25;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: any;\n  @Output() dblclick = new EventEmitter();\n  // optional margins\n  @Input() margins: number[];\n  @Output() select = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  translation: string;\n  outerRadius: number;\n  innerRadius: number;\n  data: any;\n  colors: ColorHelper;\n  domain: any;\n  dims: any;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\n      this.margins = [30, 80, 30, 80];\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n      // default value for margins\n      this.margins = [20, 20, 20, 20];\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margins,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    const xOffset = this.margins[3] + this.dims.width / 2;\n    const yOffset = this.margins[0] + this.dims.height / 2;\n    this.translation = `translate(${xOffset}, ${yOffset})`;\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\n    if (this.labels) {\n      // make room for labels\n      this.outerRadius /= 3;\n    } else {\n      this.outerRadius /= 2;\n    }\n    this.innerRadius = 0;\n    if (this.doughnut) {\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n    }\n\n    this.domain = this.getDomain();\n\n    // sort data according to domain\n    this.data = this.results.sort((a, b) => {\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n    });\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: 'ordinal',\n      domain: this.domain,\n      colors: this.colors,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  private hasNoOptionalMarginsSet(): boolean {\n    return !this.margins || this.margins.length <= 0;\n  }\n}\n","import { scaleBand } from 'd3-scale';\n\nexport function gridSize(dims, len, minWidth) {\n  let rows = 1;\n  let cols = len;\n  const width = dims.width;\n\n  if (width > minWidth) {\n    while (width / cols < minWidth) {\n      rows += 1;\n      cols = Math.ceil(len / rows);\n    }\n  }\n\n  return [cols, rows];\n}\n\nexport function gridLayout(dims, data, minWidth, designatedTotal) {\n  const xScale: any = scaleBand<number>();\n  const yScale: any = scaleBand<number>();\n  const width = dims.width;\n  const height = dims.height;\n\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\n\n  const xDomain = [];\n  const yDomain = [];\n  for (let i = 0; i < rows; i++) {\n    yDomain.push(i);\n  }\n  for (let i = 0; i < columns; i++) {\n    xDomain.push(i);\n  }\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n\n  xScale.rangeRound([0, width], 0.1);\n  yScale.rangeRound([0, height], 0.1);\n\n  const res = [];\n  const total = designatedTotal ? designatedTotal : getTotal(data);\n  const cardWidth = xScale.bandwidth();\n  const cardHeight = yScale.bandwidth();\n\n  for (let i = 0; i < data.length; i++) {\n    res[i] = {};\n    res[i].data = {\n      name: data[i] ? data[i].name : '',\n      value: data[i] ? data[i].value : undefined,\n      extra: data[i] ? data[i].extra : undefined,\n      label: data[i] ? data[i].label : ''\n    };\n    res[i].x = xScale(i % columns);\n    res[i].y = yScale(Math.floor(i / columns));\n    res[i].width = cardWidth;\n    res[i].height = cardHeight;\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n    res[i].data.total = total;\n  }\n\n  return res;\n}\n\nfunction getTotal(results) {\n  return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { min } from 'd3-array';\nimport { format } from 'd3-format';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { gridLayout } from '../common/grid-layout.helper';\nimport { formatLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-pie-grid',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"'top'\"\n            [tooltipType]=\"'tooltip'\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-grid.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridComponent extends BaseChartComponent {\n  @Input() designatedTotal: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => any;\n  @Input() label: string = 'Total';\n  @Input() minWidth: number = 150;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  dims: ViewDimensions;\n  data: any[];\n  transform: string;\n  series: any[];\n  domain: any[];\n  colorScale: ColorHelper;\n  margin = [20, 20, 20, 20];\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n\n    this.series = this.getSeries();\n    this.setColors();\n\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  defaultTooltipText({ data }): string {\n    const label = trimLabel(formatLabel(data.name));\n    const val = data.value.toLocaleString();\n    return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  getSeries(): any[] {\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n\n    return this.data.map(d => {\n      const baselineLabelHeight = 20;\n      const padding = 10;\n      const name = d.data.name;\n      const label = formatLabel(name);\n      const value = d.data.value;\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n      const innerRadius = radius * 0.9;\n\n      let count = 0;\n      const colors = () => {\n        count += 1;\n        if (count === 1) {\n          return 'rgba(100,100,100,0.3)';\n        } else {\n          return this.colorScale.getColor(label);\n        }\n      };\n\n      const xPos = d.x + (d.width - padding) / 2;\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n\n      return {\n        transform: `translate(${xPos}, ${yPos})`,\n        colors,\n        innerRadius,\n        outerRadius: radius,\n        name,\n        label: trimLabel(label),\n        total: value,\n        value,\n        percent: format('.1%')(d.data.percent),\n        data: [\n          d,\n          {\n            data: {\n              other: true,\n              value: total - value,\n              name: d.data.name\n            }\n          }\n        ]\n      };\n    });\n  }\n\n  getTotal(): any {\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colorScale = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { pie } from 'd3-shape';\n\n@Component({\n  selector: 'g[ngx-charts-pie-grid-series]',\n  template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridSeriesComponent implements OnChanges {\n  @Input() colors;\n  @Input() data;\n  @Input() innerRadius = 70;\n  @Input() outerRadius = 80;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: HTMLElement;\n  layout: any;\n  arcs: any;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.layout = pie<any, any>()\n      .value(d => d.data.value)\n      .sort(null);\n\n    this.arcs = this.getArcs();\n  }\n\n  getArcs(): any[] {\n    return this.layout(this.data).map((arc, index) => {\n      const label = arc.data.data.name;\n      const other = arc.data.data.other;\n\n      if (index === 0) {\n        arc.startAngle = 0;\n      }\n\n      const color = this.colors(label);\n      return {\n        data: arc.data.data,\n        class: 'arc ' + 'arc' + index,\n        fill: color,\n        startAngle: other ? 0 : arc.startAngle,\n        endAngle: arc.endAngle,\n        animate: this.animations && !other,\n        pointerEvents: !other\n      };\n    });\n  }\n\n  onClick(data): void {\n    this.select.emit(this.data[0].data);\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  label(arc): string {\n    return arc.data.name;\n  }\n\n  color(arc): any {\n    return this.colors(this.label(arc));\n  }\n}\n","import {\n  Component,\n  SimpleChanges,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { max } from 'd3-array';\nimport { arc, pie } from 'd3-shape';\n\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-pie-series]',\n  template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieSeriesComponent implements OnChanges {\n  @Input() colors;\n  @Input() series: any = [];\n  @Input() dims;\n  @Input() innerRadius = 60;\n  @Input() outerRadius = 80;\n  @Input() explodeSlices;\n  @Input() showLabels;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: (o: any) => any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  max: number;\n  data: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    const pieGenerator = pie<any, any>()\n      .value(d => d.value)\n      .sort(null);\n\n    const arcData = pieGenerator(this.series);\n\n    this.max = max(arcData, d => {\n      return d.value;\n    });\n\n    this.data = this.calculateLabelPositions(arcData);\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n  outerArc(): any {\n    const factor = 1.5;\n\n    return arc()\n      .innerRadius(this.outerRadius * factor)\n      .outerRadius(this.outerRadius * factor);\n  }\n\n  calculateLabelPositions(pieData): any {\n    const factor = 1.5;\n    const minDistance = 10;\n    const labelPositions = pieData;\n\n    labelPositions.forEach(d => {\n      d.pos = this.outerArc().centroid(d);\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n    });\n\n    for (let i = 0; i < labelPositions.length - 1; i++) {\n      const a = labelPositions[i];\n      if (!this.labelVisible(a)) {\n        continue;\n      }\n\n      for (let j = i + 1; j < labelPositions.length; j++) {\n        const b = labelPositions[j];\n        if (!this.labelVisible(b)) {\n          continue;\n        }\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    return labelPositions;\n  }\n\n  labelVisible(myArc): boolean {\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n  }\n\n  getTooltipTitle(a) {\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\n  }\n\n  labelText(myArc): string {\n    if (this.labelFormatting) {\n      return this.labelFormatting(myArc.data.name);\n    }\n    return this.label(myArc);\n  }\n\n  label(myArc): string {\n    return formatLabel(myArc.data.name);\n  }\n\n  defaultTooltipText(myArc): string {\n    const label = this.label(myArc);\n    const val = formatLabel(myArc.data.value);\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  color(myArc): any {\n    return this.colors.getColor(this.label(myArc));\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { AdvancedPieChartComponent } from './advanced-pie-chart.component';\nimport { PieLabelComponent } from './pie-label.component';\nimport { PieArcComponent } from './pie-arc.component';\nimport { PieChartComponent } from './pie-chart.component';\nimport { PieGridComponent } from './pie-grid.component';\nimport { PieGridSeriesComponent } from './pie-grid-series.component';\nimport { PieSeriesComponent } from './pie-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ],\n  exports: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ]\n})\nexport class PieChartModule {}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { PolarChartComponent } from './polar-chart.component';\nimport { PolarSeriesComponent } from './polar-series.component';\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\nimport { LineChartModule } from '../line-chart/line-chart.module';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, LineChartModule],\n  declarations: [PolarChartComponent, PolarSeriesComponent],\n  exports: [PolarChartComponent, PolarSeriesComponent]\n})\nexport class PolarChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  NgZone,\n  OnDestroy\n} from '@angular/core';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { roundedRect } from '../common/shape.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { decimalChecker, count } from '../common/count/count.helper';\n\n@Component({\n  selector: 'g[ngx-charts-card]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardComponent implements OnChanges, OnDestroy {\n  @Input() color;\n  @Input() bandColor;\n  @Input() textColor;\n\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() label;\n  @Input() data;\n  @Input() medianSize: number;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  @ViewChild('textEl', { static: false }) textEl: ElementRef;\n\n  element: HTMLElement;\n  value: string = '';\n  transform: string;\n  formattedLabel: string;\n  cardWidth: number;\n  cardHeight: number;\n  textWidth: number;\n  textFontSize: number = 12;\n  textTransform: string = '';\n  initialized: boolean = false;\n  animationReq: any;\n\n  bandHeight: number = 10;\n  transformBand: string;\n  textPadding = [10, 20, 5, 20];\n  labelFontSize = 15;\n\n  bandPath: string;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef, private zone: NgZone) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngOnDestroy(): void {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  update(): void {\n    this.zone.run(() => {\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n\n      this.transform = `translate(${this.x} , ${this.y})`;\n\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n      this.cardWidth = Math.max(0, this.width);\n      this.cardHeight = Math.max(0, this.height);\n\n      this.label = this.label ? this.label : this.data.name;\n\n      const cardData = {\n        label: this.label,\n        data: this.data,\n        value: this.data.value\n      };\n\n      this.formattedLabel = labelFormatting(cardData);\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n\n      const value = hasValue ? valueFormatting(cardData) : '';\n\n      this.value = this.paddedValue(value);\n      this.setPadding();\n\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n\n      setTimeout(() => {\n        this.scaleText();\n        this.value = value;\n        if (hasValue && !this.initialized) {\n          setTimeout(() => this.startCount(), 20);\n        }\n      }, 8);\n    });\n  }\n\n  paddedValue(value: string) {\n    if (this.medianSize && this.medianSize > value.length) {\n      value += '\\u2007'.repeat(this.medianSize - value.length);\n    }\n    return value;\n  }\n\n  startCount(): void {\n    if (!this.initialized && this.animations) {\n      cancelAnimationFrame(this.animationReq);\n\n      const val = this.data.value;\n      const decs = decimalChecker(val);\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const callback = ({ value, finished }) => {\n        this.zone.run(() => {\n          value = finished ? val : value;\n          this.value = valueFormatting({ label: this.label, data: this.data, value });\n          if (!finished) {\n            this.value = this.paddedValue(this.value);\n          }\n          this.cd.markForCheck();\n        });\n      };\n\n      this.animationReq = count(0, val, decs, 1, callback);\n      this.initialized = true;\n    }\n  }\n\n  scaleText(): void {\n    this.zone.run(() => {\n      const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\n      if (width === 0 || height === 0) {\n        return;\n      }\n\n      const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n      const availableWidth = this.cardWidth - 2 * textPadding;\n      const availableHeight = this.cardHeight / 3;\n\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n      this.labelFontSize = Math.min(this.textFontSize, 15);\n\n      this.setPadding();\n      this.cd.markForCheck();\n    });\n  }\n\n  setPadding() {\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const padding = this.cardHeight / 2;\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n    this.textPadding[2] = padding - this.labelFontSize;\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n}\n","import * as d3_color from 'd3-color';\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nexport function hexToRgb(value: string): any {\n  // deprecated, use d3.color()\n  return d3_color.rgb(value);\n}\n\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nexport function invertColor(value: string): string {\n  const color = d3_color.rgb(value);\n  const { r, g, b, opacity } = color;\n  if (opacity === 0) {\n    return color.toString();\n  }\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  const depth = yiq >= 128 ? -0.8 : 0.8;\n\n  return shadeRGBColor(color, depth);\n}\n\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nexport function shadeRGBColor({ r, g, b }, percent) {\n  const t = percent < 0 ? 0 : 255;\n  const p = percent < 0 ? percent * -1 : percent;\n\n  r = Math.round((t - r) * p) + r;\n  g = Math.round((t - g) * p) + g;\n  b = Math.round((t - b) * p) + b;\n\n  return `rgb(${r}, ${g}, ${b})`;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { invertColor } from '../utils/color-utils';\n\nexport interface CardModel {\n  x;\n  y;\n  width: number;\n  height: number;\n  color: string;\n  label: string;\n  data;\n  tooltipText: string;\n}\n\n@Component({\n  selector: 'g[ngx-charts-card-series]',\n  template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardSeriesComponent implements OnChanges {\n  @Input() data: any[];\n  @Input() slots: any[];\n  @Input() dims;\n  @Input() colors;\n  @Input() innerPadding = 15;\n\n  @Input() cardColor;\n  @Input() bandColor;\n  @Input() emptyColor = 'rgba(0, 0, 0, 0)';\n  @Input() textColor;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cards: CardModel[];\n  emptySlots: any[];\n  medianSize: number;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.data.length > 2) {\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const sortedLengths = this.data\n        .map(d => {\n          const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n          return hasValue\n            ? valueFormatting({\n                data: d.data,\n                label: d ? d.data.name : '',\n                value: d && d.data ? d.data.value : ''\n              }).length\n            : 0;\n        })\n        .sort((a, b) => b - a);\n      const idx = Math.ceil(this.data.length / 2);\n      this.medianSize = sortedLengths[idx];\n    }\n\n    const cards = this.getCards();\n    this.cards = cards.filter(d => d.data.value !== null);\n    this.emptySlots = cards.filter(d => d.data.value === null);\n  }\n\n  getCards(): any[] {\n    const yPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n    const xPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n\n    return this.data.map((d, index) => {\n      let label = d.data.name;\n      if (label && label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label ? label.toLocaleString() : label;\n      }\n\n      const value = d.data.value;\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n      const color = this.cardColor || valueColor || '#000';\n      return {\n        x: d.x,\n        y: d.y,\n        width: d.width - xPadding,\n        height: d.height - yPadding,\n        color,\n        bandColor: this.bandColor || valueColor,\n        textColor: this.textColor || invertColor(color),\n        label,\n        data: d.data,\n        tooltipText: `${label}: ${value}`\n      };\n    });\n  }\n\n  trackBy(index, card): string {\n    return card.label;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { gridLayout, gridSize } from '../common/grid-layout.helper';\n\n@Component({\n  selector: 'ngx-charts-number-card',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './card.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NumberCardComponent extends BaseChartComponent {\n  @Input() cardColor: string;\n  @Input() bandColor: string;\n  @Input() emptyColor: string = 'rgba(0, 0, 0, 0)';\n  @Input() innerPadding = 15;\n  @Input() textColor: string;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() designatedTotal: number;\n\n  dims: ViewDimensions;\n  data: any[];\n  slots: any[];\n  colors: ColorHelper;\n  transform: string;\n  domain: any[];\n  margin = [10, 10, 10, 10];\n\n  backgroundCards: any[];\n\n  get clickable() {\n    return !!this.select.observers.length;\n  }\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    const size = gridSize(this.dims, this.results.length, 150);\n    const N = size[0] * size[1];\n\n    const data = this.results.slice();\n\n    while (data.length < N) {\n      data.push({ value: null });\n    }\n\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { CardComponent } from './card.component';\nimport { CardSeriesComponent } from './card-series.component';\nimport { NumberCardComponent } from './number-card.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n  exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n})\nexport class NumberCardModule {}\n","import { Component, Input, Output, EventEmitter, ElementRef, OnChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { select } from 'd3-selection';\n\nimport { invertColor } from '../utils/color-utils';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell]',\n  template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [style.cursor]=\"'pointer'\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellComponent implements OnChanges {\n  @Input() data;\n  @Input() fill;\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() label;\n  @Input() value;\n  @Input() valueType;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  gradientStops: any[];\n  gradientId: string;\n  gradientUrl: string;\n\n  element: HTMLElement;\n  transform: string;\n  formattedLabel: string;\n  formattedValue: string;\n  initialized: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(): void {\n    this.update();\n\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n\n    const cellData = {\n      data: this.data,\n      label: this.label,\n      value: this.value\n    };\n\n    this.formattedValue = this.valueFormatting(cellData.value);\n    this.formattedLabel = labelFormatting(cellData);\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n  }\n\n  update(): void {\n    if (this.initialized) {\n      this.animateToCurrentForm();\n    } else {\n      if (this.animations) {\n        this.loadAnimation();\n      }\n      this.initialized = true;\n    }\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n\n    node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n\n    this.animateToCurrentForm();\n  }\n\n  getTextColor(): string {\n    return invertColor(this.fill);\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    if (this.animations) {\n      node\n        .transition()\n        .duration(750)\n        .attr('opacity', 1)\n        .attr('x', this.x)\n        .attr('y', this.y)\n        .attr('width', this.width)\n        .attr('height', this.height);\n    } else {\n      node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    }\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n\n  getGradientStops() {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: 0.3\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n}\n","import {\n  Component,\n  OnChanges,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueType]=\"c.valueType\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() dims;\n  @Input() colors;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cells: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.cells = this.getCells();\n  }\n\n  getCells(): any[] {\n    return this.data.children\n      .filter(d => {\n        return d.depth === 1;\n      })\n      .map((d, index) => {\n        const label = d.id;\n\n        return {\n          data: d.data,\n          x: d.x0,\n          y: d.y0,\n          width: d.x1 - d.x0,\n          height: d.y1 - d.y0,\n          fill: this.colors.getColor(label),\n          label,\n          value: d.value,\n          valueType: d.valueType\n        };\n      });\n  }\n\n  getTooltipText({ label, value }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.label;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { treemap, stratify } from 'd3-hierarchy';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-tree-map',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['./tree-map.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapComponent extends BaseChartComponent {\n  @Input() results;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n\n  @Output() select = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: any;\n  domain: any;\n  transform: any;\n  colors: ColorHelper;\n  treemap: any;\n  data: any;\n  margin = [10, 10, 10, 10];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.domain = this.getDomain();\n\n    this.treemap = treemap<any>().size([this.dims.width, this.dims.height]);\n\n    const rootNode = {\n      name: 'root',\n      value: 0,\n      isRoot: true\n    };\n\n    const root = stratify<any>()\n      .id(d => {\n        let label = d.name;\n\n        if (label.constructor.name === 'Date') {\n          label = label.toLocaleDateString();\n        } else {\n          label = label.toLocaleString();\n        }\n        return label;\n      })\n      .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\n      .sum(d => d.value);\n\n    this.data = this.treemap(root);\n\n    this.setColors();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { TreeMapCellComponent } from './tree-map-cell.component';\nimport { TreeMapCellSeriesComponent } from './tree-map-cell-series.component';\nimport { TreeMapComponent } from './tree-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n  exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n})\nexport class TreeMapModule {}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ViewEncapsulation,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-linear-gauge',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"'horizontal'\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"'horizontal'\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './linear-gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() value: number = 0;\n  @Input() units: string;\n  @Input() previousValue;\n  @Input() valueFormatting: any;\n\n  @ViewChild('valueTextEl') valueTextEl: ElementRef;\n  @ViewChild('unitsTextEl') unitsTextEl: ElementRef;\n\n  dims: ViewDimensions;\n  valueDomain: any;\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n  margin: any[] = [10, 20, 10, 20];\n  transformLine: string;\n\n  valueResizeScale: number = 1;\n  unitsResizeScale: number = 1;\n  valueTextTransform: string = '';\n  valueTranslate: string = '';\n  unitsTextTransform: string = '';\n  unitsTranslate: string = '';\n  displayValue: string;\n  hasPreviousValue: boolean;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => {\n      this.scaleText('value');\n      this.scaleText('units');\n    });\n  }\n\n  update(): void {\n    super.update();\n\n    this.hasPreviousValue = this.previousValue !== undefined;\n    this.max = Math.max(this.max, this.value);\n    this.min = Math.min(this.min, this.value);\n    if (this.hasPreviousValue) {\n      this.max = Math.max(this.max, this.previousValue);\n      this.min = Math.min(this.min, this.previousValue);\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.setColors();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n    this.valueTranslate = `translate(0, -15)`;\n    this.unitsTranslate = `translate(0, 15)`;\n    setTimeout(() => this.scaleText('value'), 50);\n    setTimeout(() => this.scaleText('units'), 50);\n  }\n\n  getValueDomain(): any[] {\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    if (this.valueFormatting) {\n      return this.valueFormatting(this.value);\n    }\n    return this.value.toLocaleString();\n  }\n\n  scaleText(element, repeat: boolean = true): void {\n    let el;\n    let resizeScale;\n    if (element === 'value') {\n      el = this.valueTextEl;\n      resizeScale = this.valueResizeScale;\n    } else {\n      el = this.unitsTextEl;\n      resizeScale = this.unitsResizeScale;\n    }\n\n    const { width, height } = el.nativeElement.getBoundingClientRect();\n    if (width === 0 || height === 0) return;\n    const oldScale = resizeScale;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n    const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (resizeScale !== oldScale) {\n      if (element === 'value') {\n        this.valueResizeScale = resizeScale;\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      } else {\n        this.unitsResizeScale = resizeScale;\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      }\n      this.cd.markForCheck();\n      if (repeat) {\n        setTimeout(() => {\n          this.scaleText(element, false);\n        }, 50);\n      }\n    }\n  }\n\n  onClick(): void {\n    this.select.emit({\n      name: 'Value',\n      value: this.value\n    });\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', [this.value], this.customColors);\n  }\n}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-gauge',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() textValue: string;\n  @Input() units: string;\n  @Input() bigSegments: number = 10;\n  @Input() smallSegments: number = 5;\n  @Input() results: any[];\n  @Input() showAxis: boolean = true;\n  @Input() startAngle: number = -120;\n  @Input() angleSpan: number = 240;\n  @Input() activeEntries: any[] = [];\n  @Input() axisTickFormatting: any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() showText: boolean = true;\n\n  // Specify margins\n  @Input() margin: any[];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  @ViewChild('textEl') textEl: ElementRef;\n\n  dims: ViewDimensions;\n  domain: any[];\n  valueDomain: any;\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n\n  outerRadius: number;\n  textRadius: number; // max available radius for the text\n  resizeScale: number = 1;\n  rotation: string = '';\n  textTransform: string = 'scale(1, 1)';\n  cornerRadius: number = 10;\n  arcs: any[];\n  displayValue: string;\n  legendOptions: any;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => this.scaleText());\n  }\n\n  update(): void {\n    super.update();\n\n    if (!this.showAxis) {\n      if (!this.margin) {\n        this.margin = [10, 20, 10, 20];\n      }\n    } else {\n      if (!this.margin) {\n        this.margin = [60, 100, 60, 100];\n      }\n    }\n\n    // make the starting angle positive\n    if (this.startAngle < 0) {\n      this.startAngle = (this.startAngle % 360) + 360;\n    }\n\n    this.angleSpan = Math.min(this.angleSpan, 360);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.domain = this.getDomain();\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n\n    this.arcs = this.getArcs();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.rotation = `rotate(${this.startAngle})`;\n    setTimeout(() => this.scaleText(), 50);\n  }\n\n  getArcs(): any[] {\n    const arcs = [];\n\n    const availableRadius = this.outerRadius * 0.7;\n\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n    const arcWidth = radiusPerArc * 0.7;\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n    this.cornerRadius = Math.floor(arcWidth / 2);\n\n    let i = 0;\n    for (const d of this.results) {\n      const outerRadius = this.outerRadius - i * radiusPerArc;\n      const innerRadius = outerRadius - arcWidth;\n\n      const backgroundArc = {\n        endAngle: (this.angleSpan * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: this.max,\n          name: d.name\n        }\n      };\n\n      const valueArc = {\n        endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: d.value,\n          name: d.name\n        }\n      };\n\n      const arc = {\n        backgroundArc,\n        valueArc\n      };\n\n      arcs.push(arc);\n      i++;\n    }\n\n    return arcs;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getValueDomain(): any[] {\n    const values = this.results.map(d => d.value);\n    const dataMin = Math.min(...values);\n    const dataMax = Math.max(...values);\n\n    if (this.min !== undefined) {\n      this.min = Math.min(this.min, dataMin);\n    } else {\n      this.min = dataMin;\n    }\n\n    if (this.max !== undefined) {\n      this.max = Math.max(this.max, dataMax);\n    } else {\n      this.max = dataMax;\n    }\n\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n\n    if (this.textValue && 0 !== this.textValue.length) {\n      return this.textValue.toLocaleString();\n    }\n\n    if (this.valueFormatting) {\n      return this.valueFormatting(value);\n    }\n\n    return value.toLocaleString();\n  }\n\n  scaleText(repeat: boolean = true): void {\n    if (!this.showText) {\n      return;\n    }\n    const { width } = this.textEl.nativeElement.getBoundingClientRect();\n    const oldScale = this.resizeScale;\n\n    if (width === 0) {\n      this.resizeScale = 1;\n    } else {\n      const availableSpace = this.textRadius;\n      this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n    }\n\n    if (this.resizeScale !== oldScale) {\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n      this.cd.markForCheck();\n      if (repeat) {\n        setTimeout(() => this.scaleText(false), 50);\n      }\n    }\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  getLegendOptions(): any {\n    return {\n      scaleType: 'ordinal',\n      colors: this.colors,\n      domain: this.domain,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  trackBy(index, item): string {\n    return item.valueArc.data.name;\n  }\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'g[ngx-charts-gauge-arc]',\n  template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeArcComponent {\n  @Input() backgroundArc: any;\n  @Input() valueArc: any;\n  @Input() cornerRadius: any;\n  @Input() colors: ColorHelper;\n  @Input() isActive: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  tooltipText(arc): string {\n    const label = formatLabel(arc.data.name);\n    let val;\n\n    if (this.valueFormatting) {\n      val = this.valueFormatting(arc.data.value);\n    } else {\n      val = formatLabel(arc.data.value);\n    }\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { line } from 'd3-shape';\n\n@Component({\n  selector: 'g[ngx-charts-gauge-axis]',\n  template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeAxisComponent implements OnChanges {\n  @Input() bigSegments: any;\n  @Input() smallSegments: any;\n  @Input() min: any;\n  @Input() max: any;\n  @Input() angleSpan: number;\n  @Input() startAngle: number;\n  @Input() radius: any;\n  @Input() valueScale: any;\n  @Input() tickFormatting: any;\n\n  ticks: any;\n  rotationAngle: number;\n  rotate: string = '';\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.update();\n  }\n\n  update(): void {\n    this.rotationAngle = -90 + this.startAngle;\n    this.rotate = `rotate(${this.rotationAngle})`;\n    this.ticks = this.getTicks();\n  }\n\n  getTicks(): any {\n    const bigTickSegment = this.angleSpan / this.bigSegments;\n    const smallTickSegment = bigTickSegment / this.smallSegments;\n    const tickLength = 20;\n    const ticks = {\n      big: [],\n      small: []\n    };\n\n    const startDistance = this.radius + 10;\n    const textDist = startDistance + tickLength + 10;\n\n    for (let i = 0; i <= this.bigSegments; i++) {\n      const angleDeg = i * bigTickSegment;\n      const angle = (angleDeg * Math.PI) / 180;\n\n      const textAnchor = this.getTextAnchor(angleDeg);\n\n      let skip = false;\n      if (i === 0 && this.angleSpan === 360) {\n        skip = true;\n      }\n\n      if (!skip) {\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n        if (this.tickFormatting) {\n          text = this.tickFormatting(text);\n        }\n        ticks.big.push({\n          line: this.getTickPath(startDistance, tickLength, angle),\n          textAnchor,\n          text,\n          textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n        });\n      }\n\n      if (i === this.bigSegments) {\n        continue;\n      }\n\n      for (let j = 1; j <= this.smallSegments; j++) {\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\n        const smallAngle = (smallAngleDeg * Math.PI) / 180;\n\n        ticks.small.push({\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n        });\n      }\n    }\n\n    return ticks;\n  }\n\n  getTextAnchor(angle) {\n    // [0, 45] = 'middle';\n    // [46, 135] = 'start';\n    // [136, 225] = 'middle';\n    // [226, 315] = 'end';\n\n    angle = (this.startAngle + angle) % 360;\n    let textAnchor = 'middle';\n    if (angle > 45 && angle <= 135) {\n      textAnchor = 'start';\n    } else if (angle > 225 && angle <= 315) {\n      textAnchor = 'end';\n    }\n    return textAnchor;\n  }\n\n  getTickPath(startDistance, tickLength, angle): any {\n    const y1 = startDistance * Math.sin(angle);\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\n    const x1 = startDistance * Math.cos(angle);\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\n\n    const points = [\n      { x: x1, y: y1 },\n      { x: x2, y: y2 }\n    ];\n    const lineGenerator = line<any>()\n      .x(d => d.x)\n      .y(d => d.y);\n    return lineGenerator(points);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LinearGaugeComponent } from './linear-gauge.component';\nimport { GaugeComponent } from './gauge.component';\nimport { GaugeArcComponent } from './gauge-arc.component';\nimport { GaugeAxisComponent } from './gauge-axis.component';\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\nimport { BarChartModule } from '../bar-chart/bar-chart.module';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, BarChartModule],\n  declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n  exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n})\nexport class GaugeModule {}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from './common/chart-common.module';\nimport { AreaChartModule } from './area-chart/area-chart.module';\nimport { BarChartModule } from './bar-chart/bar-chart.module';\nimport { BubbleChartModule } from './bubble-chart/bubble-chart.module';\nimport { HeatMapModule } from './heat-map/heat-map.module';\nimport { LineChartModule } from './line-chart/line-chart.module';\nimport { PolarChartModule } from './polar-chart/polar-chart.module';\nimport { NumberCardModule } from './number-card/number-card.module';\nimport { PieChartModule } from './pie-chart/pie-chart.module';\nimport { TreeMapModule } from './tree-map/tree-map.module';\nimport { GaugeModule } from './gauge/gauge.module';\nimport { ngxChartsPolyfills } from './polyfills';\n\n@NgModule({\n  exports: [\n    ChartCommonModule,\n    AreaChartModule,\n    BarChartModule,\n    BubbleChartModule,\n    HeatMapModule,\n    LineChartModule,\n    PolarChartModule,\n    NumberCardModule,\n    PieChartModule,\n    TreeMapModule,\n    GaugeModule\n  ]\n})\nexport class NgxChartsModule {\n  constructor() {\n    ngxChartsPolyfills();\n  }\n}\n","// The export is needed here to generate a valid polyfills.metadata.json file\nexport function ngxChartsPolyfills() {\n  // IE11 fix\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n  }\n}\n","import { timeFormat } from 'd3-time-format';\n\nexport function tickFormat(fieldType, groupByType): (label: string) => string {\n  return function (label: string): string {\n    if (label === 'No Value' || label === 'Other') {\n      return label;\n    }\n    if (fieldType === 'date' && groupByType === 'groupBy') {\n      const formatter = timeFormat('MM/DD/YYYY');\n      return formatter(<any>label);\n    }\n\n    return label.toString();\n  };\n}\n"]}