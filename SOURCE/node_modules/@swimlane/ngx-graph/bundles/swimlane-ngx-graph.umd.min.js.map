{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../swimlane/ngx-graph/src/lib/utils/id.ts","../../../swimlane/ngx-graph/src/lib/graph/layouts/dagre.ts","../../../swimlane/ngx-graph/src/lib/graph/layouts/dagreCluster.ts","../../../swimlane/ngx-graph/src/lib/graph/layouts/dagreNodesOnly.ts","../../../swimlane/ngx-graph/src/lib/graph/layouts/d3ForceDirected.ts","../../../swimlane/ngx-graph/src/lib/graph/layouts/colaForceDirected.ts","../../../swimlane/ngx-graph/src/lib/enums/panning.enum.ts","../../../swimlane/ngx-graph/src/lib/enums/mini-map-position.enum.ts","../../../swimlane/ngx-graph/src/lib/graph/layouts/layout.service.ts","../../../swimlane/ngx-graph/src/lib/utils/throttle.ts","../../../swimlane/ngx-graph/src/lib/graph/graph.component.ts","../../../swimlane/ngx-graph/src/lib/graph/mouse-wheel.directive.ts","../../../swimlane/ngx-graph/src/lib/graph/graph.module.ts","../../../swimlane/ngx-graph/src/lib/ngx-graph.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__metadata","metadataKey","metadataValue","Reflect","metadata","create","__values","o","s","Symbol","iterator","m","i","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","Orientation","Alignment","cache","id","newId","Math","random","pow","toString","slice","DagreLayout","this","defaultSettings","orientation","LEFT_TO_RIGHT","marginX","marginY","edgePadding","rankPadding","nodePadding","multigraph","compound","settings","run","graph","createDagreGraph","dagre.layout","dagreGraph","edgeLabels","_edgeLabels","dagreNodeId","dagreNode","this_1","_nodes","node","nodes","find","position","x","y","dimension","width","height","updateEdge","edge","sourceNode","source","targetNode","target","dir","startingPoint","endingPoint","points","assign","dagre.graphlib","Graph","setGraph","rankdir","marginx","marginy","edgesep","ranksep","nodesep","align","acyclicer","ranker","setDefaultEdgeLabel","dagreNodes","map","dagreEdges","edges","l","newLink","_c","_d","setNode","_e","_f","setEdge","DagreClusterLayout","_this","dagreToOutput","clusters","dagreClusters","cluster","childNodeIds","forEach","childNodeId","setParent","_g","_h","_j","DagreNodesOnlyLayout","curveDistance","_b","rankAxis","orderAxis","rankDimension","_a","edgeLabelId","matchingEdgeLabel","toD3Node","maybeNode","D3ForceDirectedLayout","force","forceSimulation","forceManyBody","strength","forceCollide","forceLink","distance","outputGraph$","Subject","inputGraph","d3Graph","outputGraph","links","alpha","restart","on","d3GraphToOutputGraph","asObservable","transform","onDragStart","draggingNode","$event","alphaTarget","d3Node","draggingStart","fx","fy","onDrag","onDragEnd","undefined","toNode","nodeRef","PanningAxis","MiniMapPosition","ColaForceDirectedLayout","d3adaptor","d3Dispatch","d3Force","d3Timer","linkDistance","avoidOverlaps","viewDimensions","xOffset","internalGraph","groups","padding","nodeId","findIndex","filter","leaves","sourceNodeIndex","targetNodeIndex","groupLinks","onTickListener","internalGraphToOutputGraph","size","forceModifierFn","start","bounds","rayIntersection","cx","cy","groupLink","foundNode","foundGroup","group","index","inputGroup","nodeIndex","fixed","layouts","dagre","dagreCluster","dagreNodesOnly","d3ForceDirected","colaForceDirected","LayoutService","getLayout","name","Error","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","apply","now","remaining","clearTimeout","trailing","setTimeout","throttleable","duration","key","descriptor","configurable","enumerable","get","defineProperty","Injectable","GraphComponent","el","zone","cd","layoutService","_super","legend","activeEntries","draggingEnabled","panningEnabled","panningAxis","Both","enableZoom","zoomSpeed","minZoomLevel","maxZoomLevel","autoZoom","panOnZoom","animate","autoCenter","enableTrackpadSupport","showMiniMap","miniMapMaxWidth","miniMapPosition","UpperRight","activate","EventEmitter","deactivate","zoomChange","clickHandler","isMouseMoveCalled","graphSubscription","Subscription","subscriptions","margin","results","isPanning","isDragging","initialized","graphDims","_oldLinks","oldNodes","Set","oldClusters","transformationMatrix","identity","_touchLastX","_touchLastY","minimapScaleCoefficient","minimapOffsetX","minimapOffsetY","isMinimapPanning","groupResultsBy","label","__","constructor","__extends","a","level","zoomTo","Number","panTo","f","ngOnInit","update$","subscribe","update","center$","center","zoomToFit$","zoomToFit","panToNode$","panToNodeId","minimapClipPathId","ngOnChanges","changes","layout","layoutSettings","setLayout","setLayoutSettings","ngOnDestroy","unsubscribe","ngAfterViewInit","curve","shape.curveBundle","beta","dims","calculateViewDimensions","margins","showLegend","seriesDomain","getSeriesDomain","setColors","legendOptions","getLegendOptions","createGraph","updateTransform","initializeNode","meta","forceDimensions","nodeWidth","nodeHeight","data","requestAnimationFrame","draw","applyNodeDimensions","result$","Observable","of","add","tick","pipe","first","color","colors","getColor","newLinks","edgeLabel","normKey","replace","isMultigraph","oldLink","ol","linkFromGraph","nl","JSON","stringify","oldLine","line","generateLine","updateMidpointOnEdge","textPos","floor","textTransform","textAngle","calcDominantBaseline","newL","updateMinimap","redrawLines","markForCheck","getMinimapTransform","UpperLeft","updateGraphDims","minX","Infinity","maxX","minY","maxY","miniMapMaxHeight","max","minimapTransform","nodeElements","elem","nativeElement","getBBox","ex","nodeMaxHeight","nodeMinHeight","min","getElementsByTagName","maxTextDims","currentBBox","nodeMaxWidth","nodeMinWidth","_animate","linkElements","linkEl","lin","select","attr","transition","ease","ease.easeSinInOut","chartElement","oldTextPath","textPath","link","firstPoint","lastPoint","dominantBaseline","reverse","shape\n            .line","lineFunction","onZoom","direction","ctrlKey","zoomFactor","newZoomLevel","zoomLevel","mouseX","clientX","mouseY","clientY","svg","chart","querySelector","svgGroup","point","createSVGPoint","svgPoint","matrixTransform","getScreenCTM","inverse","pan","zoom","deltaX","deltaY","ignoreZoomLevel","translate","isNaN","panX","panOffsetX","panY","panOffsetY","factor","scale","emit","event","movementX","movementY","this_2","redrawEdge","toSVG","smoothMatrix","onClick","onActivate","indexOf","entries","onDeactivate","idx","splice","reduce","sort","trackLinkBy","trackNodeBy","ColorHelper","scheme","customColors","scaleType","domain","onMouseMove","panWithConstraints","onMouseDown","graphClick","onTouchStart","changedTouches","onTouchMove","onTouchEnd","onMouseUp","onNodeMouseDown","onMinimapDragMouseDown","onMinimapPanTo","offsetX","offsetY","heightZoom","widthZoom","Horizontal","Vertical","midPoint","_first","_second","BaseChartComponent","Component","selector","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","NgZone","ChangeDetectorRef","Input","Output","ContentChild","ViewChild","ChartComponent","read","static","ViewChildren","HostListener","decorators","desc","c","getOwnPropertyDescriptor","decorate","__decorate","MouseWheelDirective","mouseWheelUp","mouseWheelDown","onMouseWheelChrome","mouseWheelFunc","onMouseWheelFirefox","onWheel","onMouseWheelIE","window","delta","wheelDelta","detail","isWheelMouseUp","isWheelMouseDown","returnValue","preventDefault","Directive","NgModule","imports","ChartCommonModule","declarations","exports","providers","NgxChartsModule","GraphModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","const cache = {};\n\n/**\n * Generates a short id.\n *\n */\nexport function id(): string {\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n\n  newId = `a${newId}`;\n\n  // ensure not already used\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { id } from '../../utils/id';\nimport * as dagre from 'dagre';\nimport { Edge } from '../../models/edge.model';\n\nexport enum Orientation {\n  LEFT_TO_RIGHT = 'LR',\n  RIGHT_TO_LEFT = 'RL',\n  TOP_TO_BOTTOM = 'TB',\n  BOTTOM_TO_TOM = 'BT'\n}\nexport enum Alignment {\n  CENTER = 'C',\n  UP_LEFT = 'UL',\n  UP_RIGHT = 'UR',\n  DOWN_LEFT = 'DL',\n  DOWN_RIGHT = 'DR'\n}\n\nexport interface DagreSettings {\n  orientation?: Orientation;\n  marginX?: number;\n  marginY?: number;\n  edgePadding?: number;\n  rankPadding?: number;\n  nodePadding?: number;\n  align?: Alignment;\n  acyclicer?: 'greedy' | undefined;\n  ranker?: 'network-simplex' | 'tight-tree' | 'longest-path';\n  multigraph?: boolean;\n  compound?: boolean;\n}\n\nexport class DagreLayout implements Layout {\n  defaultSettings: DagreSettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 20,\n    marginY: 20,\n    edgePadding: 100,\n    rankPadding: 100,\n    nodePadding: 50,\n    multigraph: true,\n    compound: true\n  };\n  settings: DagreSettings = {};\n\n  dagreGraph: any;\n  dagreNodes: any;\n  dagreEdges: any;\n\n  run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y\n      };\n      node.dimension = {\n        width: dagreNode.width,\n        height: dagreNode.height\n      };\n    }\n\n    return graph;\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n\n    // determine new arrow position\n    const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\n    const startingPoint = {\n      x: sourceNode.position.x,\n      y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\n    };\n    const endingPoint = {\n      x: targetNode.position.x,\n      y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\n    };\n\n    // generate new points\n    edge.points = [startingPoint, endingPoint];\n    return graph;\n  }\n\n  createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map(n => {\n      const node: any = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreEdges = graph.edges.map(l => {\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n      if (!node.height) {\n        node.height = 30;\n      }\n\n      // update dagre\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { id } from '../../utils/id';\nimport * as dagre from 'dagre';\nimport { Edge } from '../../models/edge.model';\nimport { Node, ClusterNode } from '../../models/node.model';\nimport { DagreSettings, Orientation } from './dagre';\n\nexport class DagreClusterLayout implements Layout {\n  defaultSettings: DagreSettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 20,\n    marginY: 20,\n    edgePadding: 100,\n    rankPadding: 100,\n    nodePadding: 50,\n    multigraph: true,\n    compound: true\n  };\n  settings: DagreSettings = {};\n\n  dagreGraph: any;\n  dagreNodes: Node[];\n  dagreClusters: ClusterNode[];\n  dagreEdges: any;\n\n  run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    const dagreToOutput = node => {\n      const dagreNode = this.dagreGraph._nodes[node.id];\n      return {\n        ...node,\n        position: {\n          x: dagreNode.x,\n          y: dagreNode.y\n        },\n        dimension: {\n          width: dagreNode.width,\n          height: dagreNode.height\n        }\n      };\n    };\n    graph.clusters = (graph.clusters || []).map(dagreToOutput);\n    graph.nodes = graph.nodes.map(dagreToOutput);\n\n    return graph;\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n\n    // determine new arrow position\n    const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\n    const startingPoint = {\n      x: sourceNode.position.x,\n      y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\n    };\n    const endingPoint = {\n      x: targetNode.position.x,\n      y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\n    };\n\n    // generate new points\n    edge.points = [startingPoint, endingPoint];\n    return graph;\n  }\n\n  createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map((n: Node) => {\n      const node: any = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreClusters = graph.clusters || [];\n\n    this.dagreEdges = graph.edges.map(l => {\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    for (const cluster of this.dagreClusters) {\n      this.dagreGraph.setNode(cluster.id, cluster);\n      cluster.childNodeIds.forEach(childNodeId => {\n        this.dagreGraph.setParent(childNodeId, cluster.id);\n      });\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { id } from '../../utils/id';\nimport * as dagre from 'dagre';\nimport { Edge } from '../../models/edge.model';\nimport { DagreSettings, Orientation } from './dagre';\n\nexport interface DagreNodesOnlySettings extends DagreSettings {\n  curveDistance?: number;\n}\n\nconst DEFAULT_EDGE_NAME = '\\x00';\nconst GRAPH_NODE = '\\x00';\nconst EDGE_KEY_DELIM = '\\x01';\n\nexport class DagreNodesOnlyLayout implements Layout {\n  defaultSettings: DagreNodesOnlySettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 20,\n    marginY: 20,\n    edgePadding: 100,\n    rankPadding: 100,\n    nodePadding: 50,\n    curveDistance: 20,\n    multigraph: true,\n    compound: true\n  };\n  settings: DagreNodesOnlySettings = {};\n\n  dagreGraph: any;\n  dagreNodes: any;\n  dagreEdges: any;\n\n  run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y\n      };\n      node.dimension = {\n        width: dagreNode.width,\n        height: dagreNode.height\n      };\n    }\n    for (const edge of graph.edges) {\n      this.updateEdge(graph, edge);\n    }\n\n    return graph;\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n    const rankAxis: 'x' | 'y' = this.settings.orientation === 'BT' || this.settings.orientation === 'TB' ? 'y' : 'x';\n    const orderAxis: 'x' | 'y' = rankAxis === 'y' ? 'x' : 'y';\n    const rankDimension = rankAxis === 'y' ? 'height' : 'width';\n    // determine new arrow position\n    const dir = sourceNode.position[rankAxis] <= targetNode.position[rankAxis] ? -1 : 1;\n    const startingPoint = {\n      [orderAxis]: sourceNode.position[orderAxis],\n      [rankAxis]: sourceNode.position[rankAxis] - dir * (sourceNode.dimension[rankDimension] / 2)\n    };\n    const endingPoint = {\n      [orderAxis]: targetNode.position[orderAxis],\n      [rankAxis]: targetNode.position[rankAxis] + dir * (targetNode.dimension[rankDimension] / 2)\n    };\n\n    const curveDistance = this.settings.curveDistance || this.defaultSettings.curveDistance;\n    // generate new points\n    edge.points = [\n      startingPoint,\n      {\n        [orderAxis]: startingPoint[orderAxis],\n        [rankAxis]: startingPoint[rankAxis] - dir * curveDistance\n      },\n      {\n        [orderAxis]: endingPoint[orderAxis],\n        [rankAxis]: endingPoint[rankAxis] + dir * curveDistance\n      },\n      endingPoint\n    ];\n    const edgeLabelId = `${edge.source}${EDGE_KEY_DELIM}${edge.target}${EDGE_KEY_DELIM}${DEFAULT_EDGE_NAME}`;\n    const matchingEdgeLabel = graph.edgeLabels[edgeLabelId];\n    if (matchingEdgeLabel) {\n      matchingEdgeLabel.points = edge.points;\n    }\n    return graph;\n  }\n\n  createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map(n => {\n      const node: any = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreEdges = graph.edges.map(l => {\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n      if (!node.height) {\n        node.height = 30;\n      }\n\n      // update dagre\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { Node } from '../../models/node.model';\nimport { id } from '../../utils/id';\nimport { forceCollide, forceLink, forceManyBody, forceSimulation } from 'd3-force';\nimport { Edge } from '../../models/edge.model';\nimport { Observable, Subject } from 'rxjs';\nimport { NodePosition } from '../../models';\n\nexport interface D3ForceDirectedSettings {\n  force?: any;\n  forceLink?: any;\n}\nexport interface D3Node {\n  id?: string;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  fx?: number;\n  fy?: number;\n}\nexport interface D3Edge {\n  source: string | D3Node;\n  target: string | D3Node;\n  midPoint: NodePosition;\n}\nexport interface D3Graph {\n  nodes: D3Node[];\n  edges: D3Edge[];\n}\nexport interface MergedNode extends D3Node, Node {\n  id: string;\n}\n\nexport function toD3Node(maybeNode: string | D3Node): D3Node {\n  if (typeof maybeNode === 'string') {\n    return {\n      id: maybeNode,\n      x: 0,\n      y: 0\n    };\n  }\n  return maybeNode;\n}\n\nexport class D3ForceDirectedLayout implements Layout {\n  defaultSettings: D3ForceDirectedSettings = {\n    force: forceSimulation<any>().force('charge', forceManyBody().strength(-150)).force('collide', forceCollide(5)),\n    forceLink: forceLink<any, any>()\n      .id(node => node.id)\n      .distance(() => 100)\n  };\n  settings: D3ForceDirectedSettings = {};\n\n  inputGraph: Graph;\n  outputGraph: Graph;\n  d3Graph: D3Graph;\n  outputGraph$: Subject<Graph> = new Subject();\n\n  draggingStart: { x: number; y: number };\n\n  run(graph: Graph): Observable<Graph> {\n    this.inputGraph = graph;\n    this.d3Graph = {\n      nodes: [...this.inputGraph.nodes.map(n => ({ ...n }))] as any,\n      edges: [...this.inputGraph.edges.map(e => ({ ...e }))] as any\n    };\n    this.outputGraph = {\n      nodes: [],\n      edges: [],\n      edgeLabels: []\n    };\n    this.outputGraph$.next(this.outputGraph);\n    this.settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (this.settings.force) {\n      this.settings.force\n        .nodes(this.d3Graph.nodes)\n        .force('link', this.settings.forceLink.links(this.d3Graph.edges))\n        .alpha(0.5)\n        .restart()\n        .on('tick', () => {\n          this.outputGraph$.next(this.d3GraphToOutputGraph(this.d3Graph));\n        });\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Observable<Graph> {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (settings.force) {\n      settings.force\n        .nodes(this.d3Graph.nodes)\n        .force('link', settings.forceLink.links(this.d3Graph.edges))\n        .alpha(0.5)\n        .restart()\n        .on('tick', () => {\n          this.outputGraph$.next(this.d3GraphToOutputGraph(this.d3Graph));\n        });\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  d3GraphToOutputGraph(d3Graph: D3Graph): Graph {\n    this.outputGraph.nodes = this.d3Graph.nodes.map((node: MergedNode) => ({\n      ...node,\n      id: node.id || id(),\n      position: {\n        x: node.x,\n        y: node.y\n      },\n      dimension: {\n        width: (node.dimension && node.dimension.width) || 20,\n        height: (node.dimension && node.dimension.height) || 20\n      },\n      transform: `translate(${node.x - ((node.dimension && node.dimension.width) || 20) / 2 || 0}, ${\n        node.y - ((node.dimension && node.dimension.height) || 20) / 2 || 0\n      })`\n    }));\n\n    this.outputGraph.edges = this.d3Graph.edges.map(edge => ({\n      ...edge,\n      source: toD3Node(edge.source).id,\n      target: toD3Node(edge.target).id,\n      points: [\n        {\n          x: toD3Node(edge.source).x,\n          y: toD3Node(edge.source).y\n        },\n        {\n          x: toD3Node(edge.target).x,\n          y: toD3Node(edge.target).y\n        }\n      ]\n    }));\n\n    this.outputGraph.edgeLabels = this.outputGraph.edges;\n    return this.outputGraph;\n  }\n\n  onDragStart(draggingNode: Node, $event: MouseEvent): void {\n    this.settings.force.alphaTarget(0.3).restart();\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n    if (!node) {\n      return;\n    }\n    this.draggingStart = { x: $event.x - node.x, y: $event.y - node.y };\n    node.fx = $event.x - this.draggingStart.x;\n    node.fy = $event.y - this.draggingStart.y;\n  }\n\n  onDrag(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n    if (!node) {\n      return;\n    }\n    node.fx = $event.x - this.draggingStart.x;\n    node.fy = $event.y - this.draggingStart.y;\n  }\n\n  onDragEnd(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n    if (!node) {\n      return;\n    }\n\n    this.settings.force.alphaTarget(0);\n    node.fx = undefined;\n    node.fy = undefined;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { Node, ClusterNode } from '../../models/node.model';\nimport { id } from '../../utils/id';\nimport { d3adaptor, ID3StyleLayoutAdaptor, Layout as ColaLayout, Group, InputNode, Link, Rectangle } from 'webcola';\nimport * as d3Dispatch from 'd3-dispatch';\nimport * as d3Force from 'd3-force';\nimport * as d3Timer from 'd3-timer';\nimport { Edge } from '../../models/edge.model';\nimport { Observable, Subject } from 'rxjs';\nimport { ViewDimensions } from '@swimlane/ngx-charts';\n\nexport interface ColaForceDirectedSettings {\n  force?: ColaLayout & ID3StyleLayoutAdaptor;\n  forceModifierFn?: (force: ColaLayout & ID3StyleLayoutAdaptor) => ColaLayout & ID3StyleLayoutAdaptor;\n  onTickListener?: (internalGraph: ColaGraph) => void;\n  viewDimensions?: ViewDimensions;\n}\nexport interface ColaGraph {\n  groups: Group[];\n  nodes: InputNode[];\n  links: Array<Link<number>>;\n}\nexport function toNode(nodes: InputNode[], nodeRef: InputNode | number): InputNode {\n  if (typeof nodeRef === 'number') {\n    return nodes[nodeRef];\n  }\n  return nodeRef;\n}\n\nexport class ColaForceDirectedLayout implements Layout {\n  defaultSettings: ColaForceDirectedSettings = {\n    force: d3adaptor({\n      ...d3Dispatch,\n      ...d3Force,\n      ...d3Timer\n    })\n      .linkDistance(150)\n      .avoidOverlaps(true),\n    viewDimensions: {\n      width: 600,\n      height: 600,\n      xOffset: 0\n    }\n  };\n  settings: ColaForceDirectedSettings = {};\n\n  inputGraph: Graph;\n  outputGraph: Graph;\n  internalGraph: ColaGraph & { groupLinks?: Edge[] };\n  outputGraph$: Subject<Graph> = new Subject();\n\n  draggingStart: { x: number; y: number };\n\n  run(graph: Graph): Observable<Graph> {\n    this.inputGraph = graph;\n    if (!this.inputGraph.clusters) {\n      this.inputGraph.clusters = [];\n    }\n    this.internalGraph = {\n      nodes: [\n        ...this.inputGraph.nodes.map(n => ({\n          ...n,\n          width: n.dimension ? n.dimension.width : 20,\n          height: n.dimension ? n.dimension.height : 20\n        }))\n      ] as any,\n      groups: [\n        ...this.inputGraph.clusters.map(\n          (cluster): Group => ({\n            padding: 5,\n            groups: cluster.childNodeIds\n              .map(nodeId => <any>this.inputGraph.clusters.findIndex(node => node.id === nodeId))\n              .filter(x => x >= 0),\n            leaves: cluster.childNodeIds\n              .map(nodeId => <any>this.inputGraph.nodes.findIndex(node => node.id === nodeId))\n              .filter(x => x >= 0)\n          })\n        )\n      ],\n      links: [\n        ...this.inputGraph.edges\n          .map(e => {\n            const sourceNodeIndex = this.inputGraph.nodes.findIndex(node => e.source === node.id);\n            const targetNodeIndex = this.inputGraph.nodes.findIndex(node => e.target === node.id);\n            if (sourceNodeIndex === -1 || targetNodeIndex === -1) {\n              return undefined;\n            }\n            return {\n              ...e,\n              source: sourceNodeIndex,\n              target: targetNodeIndex\n            };\n          })\n          .filter(x => !!x)\n      ] as any,\n      groupLinks: [\n        ...this.inputGraph.edges\n          .map(e => {\n            const sourceNodeIndex = this.inputGraph.nodes.findIndex(node => e.source === node.id);\n            const targetNodeIndex = this.inputGraph.nodes.findIndex(node => e.target === node.id);\n            if (sourceNodeIndex >= 0 && targetNodeIndex >= 0) {\n              return undefined;\n            }\n            return e;\n          })\n          .filter(x => !!x)\n      ]\n    };\n    this.outputGraph = {\n      nodes: [],\n      clusters: [],\n      edges: [],\n      edgeLabels: []\n    };\n    this.outputGraph$.next(this.outputGraph);\n    this.settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (this.settings.force) {\n      this.settings.force = this.settings.force\n        .nodes(this.internalGraph.nodes)\n        .groups(this.internalGraph.groups)\n        .links(this.internalGraph.links)\n        .alpha(0.5)\n        .on('tick', () => {\n          if (this.settings.onTickListener) {\n            this.settings.onTickListener(this.internalGraph);\n          }\n          this.outputGraph$.next(this.internalGraphToOutputGraph(this.internalGraph));\n        });\n      if (this.settings.viewDimensions) {\n        this.settings.force = this.settings.force.size([\n          this.settings.viewDimensions.width,\n          this.settings.viewDimensions.height\n        ]);\n      }\n      if (this.settings.forceModifierFn) {\n        this.settings.force = this.settings.forceModifierFn(this.settings.force);\n      }\n      this.settings.force.start();\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Observable<Graph> {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (settings.force) {\n      settings.force.start();\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  internalGraphToOutputGraph(internalGraph: any): Graph {\n    this.outputGraph.nodes = internalGraph.nodes.map(node => ({\n      ...node,\n      id: node.id || id(),\n      position: {\n        x: node.x,\n        y: node.y\n      },\n      dimension: {\n        width: (node.dimension && node.dimension.width) || 20,\n        height: (node.dimension && node.dimension.height) || 20\n      },\n      transform: `translate(${node.x - ((node.dimension && node.dimension.width) || 20) / 2 || 0}, ${\n        node.y - ((node.dimension && node.dimension.height) || 20) / 2 || 0\n      })`\n    }));\n\n    this.outputGraph.edges = internalGraph.links\n      .map(edge => {\n        const source: any = toNode(internalGraph.nodes, edge.source);\n        const target: any = toNode(internalGraph.nodes, edge.target);\n        return {\n          ...edge,\n          source: source.id,\n          target: target.id,\n          points: [\n            (source.bounds as Rectangle).rayIntersection(target.bounds.cx(), target.bounds.cy()),\n            (target.bounds as Rectangle).rayIntersection(source.bounds.cx(), source.bounds.cy())\n          ]\n        };\n      })\n      .concat(\n        internalGraph.groupLinks.map(groupLink => {\n          const sourceNode = internalGraph.nodes.find(foundNode => (foundNode as any).id === groupLink.source);\n          const targetNode = internalGraph.nodes.find(foundNode => (foundNode as any).id === groupLink.target);\n          const source =\n            sourceNode || internalGraph.groups.find(foundGroup => (foundGroup as any).id === groupLink.source);\n          const target =\n            targetNode || internalGraph.groups.find(foundGroup => (foundGroup as any).id === groupLink.target);\n          return {\n            ...groupLink,\n            source: source.id,\n            target: target.id,\n            points: [\n              (source.bounds as Rectangle).rayIntersection(target.bounds.cx(), target.bounds.cy()),\n              (target.bounds as Rectangle).rayIntersection(source.bounds.cx(), source.bounds.cy())\n            ]\n          };\n        })\n      );\n\n    this.outputGraph.clusters = internalGraph.groups.map(\n      (group, index): ClusterNode => {\n        const inputGroup = this.inputGraph.clusters[index];\n        return {\n          ...inputGroup,\n          dimension: {\n            width: group.bounds ? group.bounds.width() : 20,\n            height: group.bounds ? group.bounds.height() : 20\n          },\n          position: {\n            x: group.bounds ? group.bounds.x + group.bounds.width() / 2 : 0,\n            y: group.bounds ? group.bounds.y + group.bounds.height() / 2 : 0\n          }\n        };\n      }\n    );\n    this.outputGraph.edgeLabels = this.outputGraph.edges;\n    return this.outputGraph;\n  }\n\n  onDragStart(draggingNode: Node, $event: MouseEvent): void {\n    const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n    const node = this.internalGraph.nodes[nodeIndex];\n    if (!node) {\n      return;\n    }\n    this.draggingStart = { x: node.x - $event.x, y: node.y - $event.y };\n    node.fixed = 1;\n    this.settings.force.start();\n  }\n\n  onDrag(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n    const node = this.internalGraph.nodes[nodeIndex];\n    if (!node) {\n      return;\n    }\n    node.x = this.draggingStart.x + $event.x;\n    node.y = this.draggingStart.y + $event.y;\n  }\n\n  onDragEnd(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n    const node = this.internalGraph.nodes[nodeIndex];\n    if (!node) {\n      return;\n    }\n\n    node.fixed = 0;\n  }\n}\n","export enum PanningAxis {\n  Both = 'both',\n  Horizontal = 'horizontal',\n  Vertical = 'vertical'\n}\n","export enum MiniMapPosition {\n  UpperLeft = 'UpperLeft',\n  UpperRight = 'UpperRight'\n}\n","import { Injectable } from '@angular/core';\nimport { Layout } from '../../models/layout.model';\nimport { DagreLayout } from './dagre';\nimport { DagreClusterLayout } from './dagreCluster';\nimport { DagreNodesOnlyLayout } from './dagreNodesOnly';\nimport { D3ForceDirectedLayout } from './d3ForceDirected';\nimport { ColaForceDirectedLayout } from './colaForceDirected';\n\nconst layouts = {\n  dagre: DagreLayout,\n  dagreCluster: DagreClusterLayout,\n  dagreNodesOnly: DagreNodesOnlyLayout,\n  d3ForceDirected: D3ForceDirectedLayout,\n  colaForceDirected: ColaForceDirectedLayout\n};\n\n@Injectable()\nexport class LayoutService {\n  getLayout(name: string): Layout {\n    if (layouts[name]) {\n      return new layouts[name]();\n    } else {\n      throw new Error(`Unknown layout type '${name}'`);\n    }\n  }\n}\n","/**\n * Throttle a function\n *\n * @export\n * @param {*}      func\n * @param {number} wait\n * @param {*}      [options]\n * @returns\n */\nexport function throttle(func: any, wait: number, options?: any) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n *\n * @export\n * @param {number} duration\n * @param {*} [options]\n * @returns\n */\nexport function throttleable(duration: number, options?: any) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n\n        return this[key];\n      }\n    };\n  };\n}\n","// rename transition due to conflict with d3 transition\nimport { animate, style, transition as ngTransition, trigger } from '@angular/animations';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation,\n  NgZone,\n  ChangeDetectorRef,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport {\n  BaseChartComponent,\n  ChartComponent,\n  ColorHelper,\n  ViewDimensions,\n  calculateViewDimensions\n} from '@swimlane/ngx-charts';\nimport { select } from 'd3-selection';\nimport * as shape from 'd3-shape';\nimport * as ease from 'd3-ease';\nimport 'd3-transition';\nimport { Observable, Subscription, of } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { identity, scale, smoothMatrix, toSVG, transform, translate } from 'transformation-matrix';\nimport { Layout } from '../models/layout.model';\nimport { LayoutService } from './layouts/layout.service';\nimport { Edge } from '../models/edge.model';\nimport { Node, ClusterNode } from '../models/node.model';\nimport { Graph } from '../models/graph.model';\nimport { id } from '../utils/id';\nimport { PanningAxis } from '../enums/panning.enum';\nimport { MiniMapPosition } from '../enums/mini-map-position.enum';\nimport { throttleable } from '../utils/throttle';\n\n/**\n * Matrix\n */\nexport interface Matrix {\n  a: number;\n  b: number;\n  c: number;\n  d: number;\n  e: number;\n  f: number;\n}\n\n@Component({\n  selector: 'ngx-graph',\n  styleUrls: ['./graph.component.scss'],\n  templateUrl: 'graph.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GraphComponent extends BaseChartComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {\n  @Input() legend: boolean = false;\n  @Input() nodes: Node[] = [];\n  @Input() clusters: ClusterNode[] = [];\n  @Input() links: Edge[] = [];\n  @Input() activeEntries: any[] = [];\n  @Input() curve: any;\n  @Input() draggingEnabled = true;\n  @Input() nodeHeight: number;\n  @Input() nodeMaxHeight: number;\n  @Input() nodeMinHeight: number;\n  @Input() nodeWidth: number;\n  @Input() nodeMinWidth: number;\n  @Input() nodeMaxWidth: number;\n  @Input() panningEnabled: boolean = true;\n  @Input() panningAxis: PanningAxis = PanningAxis.Both;\n  @Input() enableZoom = true;\n  @Input() zoomSpeed = 0.1;\n  @Input() minZoomLevel = 0.1;\n  @Input() maxZoomLevel = 4.0;\n  @Input() autoZoom = false;\n  @Input() panOnZoom = true;\n  @Input() animate? = false;\n  @Input() autoCenter = false;\n  @Input() update$: Observable<any>;\n  @Input() center$: Observable<any>;\n  @Input() zoomToFit$: Observable<any>;\n  @Input() panToNode$: Observable<any>;\n  @Input() layout: string | Layout;\n  @Input() layoutSettings: any;\n  @Input() enableTrackpadSupport = false;\n  @Input() showMiniMap: boolean = false;\n  @Input() miniMapMaxWidth: number = 100;\n  @Input() miniMapMaxHeight: number;\n  @Input() miniMapPosition: MiniMapPosition = MiniMapPosition.UpperRight;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n  @Output() zoomChange: EventEmitter<number> = new EventEmitter();\n  @Output() clickHandler: EventEmitter<MouseEvent> = new EventEmitter();\n\n  @ContentChild('linkTemplate') linkTemplate: TemplateRef<any>;\n  @ContentChild('nodeTemplate') nodeTemplate: TemplateRef<any>;\n  @ContentChild('clusterTemplate') clusterTemplate: TemplateRef<any>;\n  @ContentChild('defsTemplate') defsTemplate: TemplateRef<any>;\n  @ContentChild('miniMapNodeTemplate') miniMapNodeTemplate: TemplateRef<any>;\n\n  @ViewChild(ChartComponent, { read: ElementRef, static: true }) chart: ElementRef;\n  @ViewChildren('nodeElement') nodeElements: QueryList<ElementRef>;\n  @ViewChildren('linkElement') linkElements: QueryList<ElementRef>;\n\n  private isMouseMoveCalled: boolean = false;\n\n  graphSubscription: Subscription = new Subscription();\n  subscriptions: Subscription[] = [];\n  colors: ColorHelper;\n  dims: ViewDimensions;\n  margin = [0, 0, 0, 0];\n  results = [];\n  seriesDomain: any;\n  transform: string;\n  legendOptions: any;\n  isPanning = false;\n  isDragging = false;\n  draggingNode: Node;\n  initialized = false;\n  graph: Graph;\n  graphDims: any = { width: 0, height: 0 };\n  _oldLinks: Edge[] = [];\n  oldNodes: Set<string> = new Set();\n  oldClusters: Set<string> = new Set();\n  transformationMatrix: Matrix = identity();\n  _touchLastX = null;\n  _touchLastY = null;\n  minimapScaleCoefficient: number = 3;\n  minimapTransform: string;\n  minimapOffsetX: number = 0;\n  minimapOffsetY: number = 0;\n  isMinimapPanning = false;\n  minimapClipPathId: string;\n\n  constructor(\n    private el: ElementRef,\n    public zone: NgZone,\n    public cd: ChangeDetectorRef,\n    private layoutService: LayoutService\n  ) {\n    super(el, zone, cd);\n  }\n\n  @Input()\n  groupResultsBy: (node: any) => string = node => node.label;\n\n  /**\n   * Get the current zoom level\n   */\n  get zoomLevel() {\n    return this.transformationMatrix.a;\n  }\n\n  /**\n   * Set the current zoom level\n   */\n  @Input('zoomLevel')\n  set zoomLevel(level) {\n    this.zoomTo(Number(level));\n  }\n\n  /**\n   * Get the current `x` position of the graph\n   */\n  get panOffsetX() {\n    return this.transformationMatrix.e;\n  }\n\n  /**\n   * Set the current `x` position of the graph\n   */\n  @Input('panOffsetX')\n  set panOffsetX(x) {\n    this.panTo(Number(x), null);\n  }\n\n  /**\n   * Get the current `y` position of the graph\n   */\n  get panOffsetY() {\n    return this.transformationMatrix.f;\n  }\n\n  /**\n   * Set the current `y` position of the graph\n   */\n  @Input('panOffsetY')\n  set panOffsetY(y) {\n    this.panTo(null, Number(y));\n  }\n\n  /**\n   * Angular lifecycle event\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  ngOnInit(): void {\n    if (this.update$) {\n      this.subscriptions.push(\n        this.update$.subscribe(() => {\n          this.update();\n        })\n      );\n    }\n\n    if (this.center$) {\n      this.subscriptions.push(\n        this.center$.subscribe(() => {\n          this.center();\n        })\n      );\n    }\n    if (this.zoomToFit$) {\n      this.subscriptions.push(\n        this.zoomToFit$.subscribe(() => {\n          this.zoomToFit();\n        })\n      );\n    }\n\n    if (this.panToNode$) {\n      this.subscriptions.push(\n        this.panToNode$.subscribe((nodeId: string) => {\n          this.panToNodeId(nodeId);\n        })\n      );\n    }\n\n    this.minimapClipPathId = `minimapClip${id()}`;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { layout, layoutSettings, nodes, clusters, links } = changes;\n    this.setLayout(this.layout);\n    if (layoutSettings) {\n      this.setLayoutSettings(this.layoutSettings);\n    }\n    this.update();\n  }\n\n  setLayout(layout: string | Layout): void {\n    this.initialized = false;\n    if (!layout) {\n      layout = 'dagre';\n    }\n    if (typeof layout === 'string') {\n      this.layout = this.layoutService.getLayout(layout);\n      this.setLayoutSettings(this.layoutSettings);\n    }\n  }\n\n  setLayoutSettings(settings: any): void {\n    if (this.layout && typeof this.layout !== 'string') {\n      this.layout.settings = settings;\n    }\n  }\n\n  /**\n   * Angular lifecycle event\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    for (const sub of this.subscriptions) {\n      sub.unsubscribe();\n    }\n    this.subscriptions = null;\n  }\n\n  /**\n   * Angular lifecycle event\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => this.update());\n  }\n\n  /**\n   * Base class update implementation for the dag graph\n   *\n   * @memberOf GraphComponent\n   */\n  update(): void {\n    super.update();\n    if (!this.curve) {\n      this.curve = shape.curveBundle.beta(1);\n    }\n\n    this.zone.run(() => {\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showLegend: this.legend\n      });\n\n      this.seriesDomain = this.getSeriesDomain();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n\n      this.createGraph();\n      this.updateTransform();\n      this.initialized = true;\n    });\n  }\n\n  /**\n   * Creates the dagre graph engine\n   *\n   * @memberOf GraphComponent\n   */\n  createGraph(): void {\n    this.graphSubscription.unsubscribe();\n    this.graphSubscription = new Subscription();\n    const initializeNode = (n: Node) => {\n      if (!n.meta) {\n        n.meta = {};\n      }\n      if (!n.id) {\n        n.id = id();\n      }\n      if (!n.dimension) {\n        n.dimension = {\n          width: this.nodeWidth ? this.nodeWidth : 30,\n          height: this.nodeHeight ? this.nodeHeight : 30\n        };\n        n.meta.forceDimensions = false;\n      } else {\n        n.meta.forceDimensions = n.meta.forceDimensions === undefined ? true : n.meta.forceDimensions;\n      }\n      n.position = {\n        x: 0,\n        y: 0\n      };\n      n.data = n.data ? n.data : {};\n      return n;\n    };\n\n    this.graph = {\n      nodes: this.nodes.length > 0 ? [...this.nodes].map(initializeNode) : [],\n      clusters: this.clusters && this.clusters.length > 0 ? [...this.clusters].map(initializeNode) : [],\n      edges:\n        this.links.length > 0\n          ? [...this.links].map(e => {\n              if (!e.id) {\n                e.id = id();\n              }\n              return e;\n            })\n          : []\n    };\n\n    requestAnimationFrame(() => this.draw());\n  }\n\n  /**\n   * Draws the graph using dagre layouts\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  draw(): void {\n    if (!this.layout || typeof this.layout === 'string') {\n      return;\n    }\n    // Calc view dims for the nodes\n    this.applyNodeDimensions();\n\n    // Recalc the layout\n    const result = this.layout.run(this.graph);\n    const result$ = result instanceof Observable ? result : of(result);\n    this.graphSubscription.add(\n      result$.subscribe(graph => {\n        this.graph = graph;\n        this.tick();\n      })\n    );\n\n    if (this.graph.nodes.length === 0) {\n      return;\n    }\n\n    result$.pipe(first()).subscribe(() => this.applyNodeDimensions());\n  }\n\n  tick() {\n    // Transposes view options to the node\n    const oldNodes: Set<string> = new Set();\n\n    this.graph.nodes.map(n => {\n      n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${\n        n.position.y - n.dimension.height / 2 || 0\n      })`;\n      if (!n.data) {\n        n.data = {};\n      }\n      n.data.color = this.colors.getColor(this.groupResultsBy(n));\n      oldNodes.add(n.id);\n    });\n\n    const oldClusters: Set<string> = new Set();\n\n    (this.graph.clusters || []).map(n => {\n      n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${\n        n.position.y - n.dimension.height / 2 || 0\n      })`;\n      if (!n.data) {\n        n.data = {};\n      }\n      n.data.color = this.colors.getColor(this.groupResultsBy(n));\n      oldClusters.add(n.id);\n    });\n\n    // Prevent animations on new nodes\n    setTimeout(() => {\n      this.oldNodes = oldNodes;\n      this.oldClusters = oldClusters;\n    }, 500);\n\n    // Update the labels to the new positions\n    const newLinks = [];\n    for (const edgeLabelId in this.graph.edgeLabels) {\n      const edgeLabel = this.graph.edgeLabels[edgeLabelId];\n\n      const normKey = edgeLabelId.replace(/[^\\w-]*/g, '');\n\n      const isMultigraph =\n        this.layout && typeof this.layout !== 'string' && this.layout.settings && this.layout.settings.multigraph;\n\n      let oldLink = isMultigraph\n        ? this._oldLinks.find(ol => `${ol.source}${ol.target}${ol.id}` === normKey)\n        : this._oldLinks.find(ol => `${ol.source}${ol.target}` === normKey);\n\n      const linkFromGraph = isMultigraph\n        ? this.graph.edges.find(nl => `${nl.source}${nl.target}${nl.id}` === normKey)\n        : this.graph.edges.find(nl => `${nl.source}${nl.target}` === normKey);\n\n      if (!oldLink) {\n        oldLink = linkFromGraph || edgeLabel;\n      } else if (\n        oldLink.data &&\n        linkFromGraph &&\n        linkFromGraph.data &&\n        JSON.stringify(oldLink.data) !== JSON.stringify(linkFromGraph.data)\n      ) {\n        // Compare old link to new link and replace if not equal\n        oldLink.data = linkFromGraph.data;\n      }\n\n      oldLink.oldLine = oldLink.line;\n\n      const points = edgeLabel.points;\n      const line = this.generateLine(points);\n\n      const newLink = Object.assign({}, oldLink);\n      newLink.line = line;\n      newLink.points = points;\n\n      this.updateMidpointOnEdge(newLink, points);\n\n      const textPos = points[Math.floor(points.length / 2)];\n      if (textPos) {\n        newLink.textTransform = `translate(${textPos.x || 0},${textPos.y || 0})`;\n      }\n\n      newLink.textAngle = 0;\n      if (!newLink.oldLine) {\n        newLink.oldLine = newLink.line;\n      }\n\n      this.calcDominantBaseline(newLink);\n      newLinks.push(newLink);\n    }\n\n    this.graph.edges = newLinks;\n\n    // Map the old links for animations\n    if (this.graph.edges) {\n      this._oldLinks = this.graph.edges.map(l => {\n        const newL = Object.assign({}, l);\n        newL.oldLine = l.line;\n        return newL;\n      });\n    }\n\n    this.updateMinimap();\n\n    if (this.autoZoom) {\n      this.zoomToFit();\n    }\n\n    if (this.autoCenter) {\n      // Auto-center when rendering\n      this.center();\n    }\n\n    requestAnimationFrame(() => this.redrawLines());\n    this.cd.markForCheck();\n  }\n\n  getMinimapTransform(): string {\n    switch (this.miniMapPosition) {\n      case MiniMapPosition.UpperLeft: {\n        return '';\n      }\n      case MiniMapPosition.UpperRight: {\n        return 'translate(' + (this.dims.width - this.graphDims.width / this.minimapScaleCoefficient) + ',' + 0 + ')';\n      }\n      default: {\n        return '';\n      }\n    }\n  }\n\n  updateGraphDims() {\n    let minX = +Infinity;\n    let maxX = -Infinity;\n    let minY = +Infinity;\n    let maxY = -Infinity;\n\n    for (let i = 0; i < this.graph.nodes.length; i++) {\n      const node = this.graph.nodes[i];\n      minX = node.position.x < minX ? node.position.x : minX;\n      minY = node.position.y < minY ? node.position.y : minY;\n      maxX = node.position.x + node.dimension.width > maxX ? node.position.x + node.dimension.width : maxX;\n      maxY = node.position.y + node.dimension.height > maxY ? node.position.y + node.dimension.height : maxY;\n    }\n    minX -= 100;\n    minY -= 100;\n    maxX += 100;\n    maxY += 100;\n    this.graphDims.width = maxX - minX;\n    this.graphDims.height = maxY - minY;\n    this.minimapOffsetX = minX;\n    this.minimapOffsetY = minY;\n  }\n\n  @throttleable(500)\n  updateMinimap() {\n    // Calculate the height/width total, but only if we have any nodes\n    if (this.graph.nodes && this.graph.nodes.length) {\n      this.updateGraphDims();\n\n      if (this.miniMapMaxWidth) {\n        this.minimapScaleCoefficient = this.graphDims.width / this.miniMapMaxWidth;\n      }\n      if (this.miniMapMaxHeight) {\n        this.minimapScaleCoefficient = Math.max(\n          this.minimapScaleCoefficient,\n          this.graphDims.height / this.miniMapMaxHeight\n        );\n      }\n\n      this.minimapTransform = this.getMinimapTransform();\n    }\n  }\n\n  /**\n   * Measures the node element and applies the dimensions\n   *\n   * @memberOf GraphComponent\n   */\n  applyNodeDimensions(): void {\n    if (this.nodeElements && this.nodeElements.length) {\n      this.nodeElements.map(elem => {\n        const nativeElement = elem.nativeElement;\n        const node = this.graph.nodes.find(n => n.id === nativeElement.id);\n        if (!node) {\n          return;\n        }\n\n        // calculate the height\n        let dims;\n        try {\n          dims = nativeElement.getBBox();\n          if (!dims.width || !dims.height) {\n            return;\n          }\n        } catch (ex) {\n          // Skip drawing if element is not displayed - Firefox would throw an error here\n          return;\n        }\n        if (this.nodeHeight) {\n          node.dimension.height =\n            node.dimension.height && node.meta.forceDimensions ? node.dimension.height : this.nodeHeight;\n        } else {\n          node.dimension.height =\n            node.dimension.height && node.meta.forceDimensions ? node.dimension.height : dims.height;\n        }\n\n        if (this.nodeMaxHeight) {\n          node.dimension.height = Math.max(node.dimension.height, this.nodeMaxHeight);\n        }\n        if (this.nodeMinHeight) {\n          node.dimension.height = Math.min(node.dimension.height, this.nodeMinHeight);\n        }\n\n        if (this.nodeWidth) {\n          node.dimension.width =\n            node.dimension.width && node.meta.forceDimensions ? node.dimension.width : this.nodeWidth;\n        } else {\n          // calculate the width\n          if (nativeElement.getElementsByTagName('text').length) {\n            let maxTextDims;\n            try {\n              for (const textElem of nativeElement.getElementsByTagName('text')) {\n                const currentBBox = textElem.getBBox();\n                if (!maxTextDims) {\n                  maxTextDims = currentBBox;\n                } else {\n                  if (currentBBox.width > maxTextDims.width) {\n                    maxTextDims.width = currentBBox.width;\n                  }\n                  if (currentBBox.height > maxTextDims.height) {\n                    maxTextDims.height = currentBBox.height;\n                  }\n                }\n              }\n            } catch (ex) {\n              // Skip drawing if element is not displayed - Firefox would throw an error here\n              return;\n            }\n            node.dimension.width =\n              node.dimension.width && node.meta.forceDimensions ? node.dimension.width : maxTextDims.width + 20;\n          } else {\n            node.dimension.width =\n              node.dimension.width && node.meta.forceDimensions ? node.dimension.width : dims.width;\n          }\n        }\n\n        if (this.nodeMaxWidth) {\n          node.dimension.width = Math.max(node.dimension.width, this.nodeMaxWidth);\n        }\n        if (this.nodeMinWidth) {\n          node.dimension.width = Math.min(node.dimension.width, this.nodeMinWidth);\n        }\n      });\n    }\n  }\n\n  /**\n   * Redraws the lines when dragged or viewport updated\n   *\n   * @memberOf GraphComponent\n   */\n  redrawLines(_animate = this.animate): void {\n    this.linkElements.map(linkEl => {\n      const edge = this.graph.edges.find(lin => lin.id === linkEl.nativeElement.id);\n\n      if (edge) {\n        const linkSelection = select(linkEl.nativeElement).select('.line');\n        linkSelection\n          .attr('d', edge.oldLine)\n          .transition()\n          .ease(ease.easeSinInOut)\n          .duration(_animate ? 500 : 0)\n          .attr('d', edge.line);\n\n        const textPathSelection = select(this.chartElement.nativeElement).select(`#${edge.id}`);\n        textPathSelection\n          .attr('d', edge.oldTextPath)\n          .transition()\n          .ease(ease.easeSinInOut)\n          .duration(_animate ? 500 : 0)\n          .attr('d', edge.textPath);\n\n        this.updateMidpointOnEdge(edge, edge.points);\n      }\n    });\n  }\n\n  /**\n   * Calculate the text directions / flipping\n   *\n   * @memberOf GraphComponent\n   */\n  calcDominantBaseline(link): void {\n    const firstPoint = link.points[0];\n    const lastPoint = link.points[link.points.length - 1];\n    link.oldTextPath = link.textPath;\n\n    if (lastPoint.x < firstPoint.x) {\n      link.dominantBaseline = 'text-before-edge';\n\n      // reverse text path for when its flipped upside down\n      link.textPath = this.generateLine([...link.points].reverse());\n    } else {\n      link.dominantBaseline = 'text-after-edge';\n      link.textPath = link.line;\n    }\n  }\n\n  /**\n   * Generate the new line path\n   *\n   * @memberOf GraphComponent\n   */\n  generateLine(points: any): any {\n    const lineFunction = shape\n      .line<any>()\n      .x(d => d.x)\n      .y(d => d.y)\n      .curve(this.curve);\n    return lineFunction(points);\n  }\n\n  /**\n   * Zoom was invoked from event\n   *\n   * @memberOf GraphComponent\n   */\n  onZoom($event: WheelEvent, direction): void {\n    if (this.enableTrackpadSupport && !$event.ctrlKey) {\n      this.pan($event.deltaX * -1, $event.deltaY * -1);\n      return;\n    }\n\n    const zoomFactor = 1 + (direction === 'in' ? this.zoomSpeed : -this.zoomSpeed);\n\n    // Check that zooming wouldn't put us out of bounds\n    const newZoomLevel = this.zoomLevel * zoomFactor;\n    if (newZoomLevel <= this.minZoomLevel || newZoomLevel >= this.maxZoomLevel) {\n      return;\n    }\n\n    // Check if zooming is enabled or not\n    if (!this.enableZoom) {\n      return;\n    }\n\n    if (this.panOnZoom === true && $event) {\n      // Absolute mouse X/Y on the screen\n      const mouseX = $event.clientX;\n      const mouseY = $event.clientY;\n\n      // Transform the mouse X/Y into a SVG X/Y\n      const svg = this.chart.nativeElement.querySelector('svg');\n      const svgGroup = svg.querySelector('g.chart');\n\n      const point = svg.createSVGPoint();\n      point.x = mouseX;\n      point.y = mouseY;\n      const svgPoint = point.matrixTransform(svgGroup.getScreenCTM().inverse());\n\n      // Panzoom\n      this.pan(svgPoint.x, svgPoint.y, true);\n      this.zoom(zoomFactor);\n      this.pan(-svgPoint.x, -svgPoint.y, true);\n    } else {\n      this.zoom(zoomFactor);\n    }\n  }\n\n  /**\n   * Pan by x/y\n   *\n   * @param x\n   * @param y\n   */\n  pan(x: number, y: number, ignoreZoomLevel: boolean = false): void {\n    const zoomLevel = ignoreZoomLevel ? 1 : this.zoomLevel;\n    this.transformationMatrix = transform(this.transformationMatrix, translate(x / zoomLevel, y / zoomLevel));\n\n    this.updateTransform();\n  }\n\n  /**\n   * Pan to a fixed x/y\n   *\n   */\n  panTo(x: number, y: number): void {\n    if (x === null || x === undefined || isNaN(x) || y === null || y === undefined || isNaN(y)) {\n      return;\n    }\n\n    const panX = -this.panOffsetX - x * this.zoomLevel + this.dims.width / 2;\n    const panY = -this.panOffsetY - y * this.zoomLevel + this.dims.height / 2;\n\n    this.transformationMatrix = transform(\n      this.transformationMatrix,\n      translate(panX / this.zoomLevel, panY / this.zoomLevel)\n    );\n\n    this.updateTransform();\n  }\n\n  /**\n   * Zoom by a factor\n   *\n   */\n  zoom(factor: number): void {\n    this.transformationMatrix = transform(this.transformationMatrix, scale(factor, factor));\n    this.zoomChange.emit(this.zoomLevel);\n    this.updateTransform();\n  }\n\n  /**\n   * Zoom to a fixed level\n   *\n   */\n  zoomTo(level: number): void {\n    this.transformationMatrix.a = isNaN(level) ? this.transformationMatrix.a : Number(level);\n    this.transformationMatrix.d = isNaN(level) ? this.transformationMatrix.d : Number(level);\n    this.zoomChange.emit(this.zoomLevel);\n    this.updateTransform();\n    this.update();\n  }\n\n  /**\n   * Drag was invoked from an event\n   *\n   * @memberOf GraphComponent\n   */\n  onDrag(event: MouseEvent): void {\n    if (!this.draggingEnabled) {\n      return;\n    }\n    const node = this.draggingNode;\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDrag) {\n      this.layout.onDrag(node, event);\n    }\n\n    node.position.x += event.movementX / this.zoomLevel;\n    node.position.y += event.movementY / this.zoomLevel;\n\n    // move the node\n    const x = node.position.x - node.dimension.width / 2;\n    const y = node.position.y - node.dimension.height / 2;\n    node.transform = `translate(${x}, ${y})`;\n\n    for (const link of this.graph.edges) {\n      if (\n        link.target === node.id ||\n        link.source === node.id ||\n        (link.target as any).id === node.id ||\n        (link.source as any).id === node.id\n      ) {\n        if (this.layout && typeof this.layout !== 'string') {\n          const result = this.layout.updateEdge(this.graph, link);\n          const result$ = result instanceof Observable ? result : of(result);\n          this.graphSubscription.add(\n            result$.subscribe(graph => {\n              this.graph = graph;\n              this.redrawEdge(link);\n            })\n          );\n        }\n      }\n    }\n\n    this.redrawLines(false);\n    this.updateMinimap();\n  }\n\n  redrawEdge(edge: Edge) {\n    const line = this.generateLine(edge.points);\n    this.calcDominantBaseline(edge);\n    edge.oldLine = edge.line;\n    edge.line = line;\n  }\n\n  /**\n   * Update the entire view for the new pan position\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  updateTransform(): void {\n    this.transform = toSVG(smoothMatrix(this.transformationMatrix, 100));\n  }\n\n  /**\n   * Node was clicked\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  onClick(event: any): void {\n    this.select.emit(event);\n  }\n\n  /**\n   * Node was focused\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  onActivate(event): void {\n    if (this.activeEntries.indexOf(event) > -1) {\n      return;\n    }\n    this.activeEntries = [event, ...this.activeEntries];\n    this.activate.emit({ value: event, entries: this.activeEntries });\n  }\n\n  /**\n   * Node was defocused\n   *\n   * @memberOf GraphComponent\n   */\n  onDeactivate(event): void {\n    const idx = this.activeEntries.indexOf(event);\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: event, entries: this.activeEntries });\n  }\n\n  /**\n   * Get the domain series for the nodes\n   *\n   * @memberOf GraphComponent\n   */\n  getSeriesDomain(): any[] {\n    return this.nodes\n      .map(d => this.groupResultsBy(d))\n      .reduce((nodes: string[], node): any[] => (nodes.indexOf(node) !== -1 ? nodes : nodes.concat([node])), [])\n      .sort();\n  }\n\n  /**\n   * Tracking for the link\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  trackLinkBy(index: number, link: Edge): any {\n    return link.id;\n  }\n\n  /**\n   * Tracking for the node\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  trackNodeBy(index: number, node: Node): any {\n    return node.id;\n  }\n\n  /**\n   * Sets the colors the nodes\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.seriesDomain, this.customColors);\n  }\n\n  /**\n   * Gets the legend options\n   *\n   * @memberOf GraphComponent\n   */\n  getLegendOptions(): any {\n    return {\n      scaleType: 'ordinal',\n      domain: this.seriesDomain,\n      colors: this.colors\n    };\n  }\n\n  /**\n   * On mouse move event, used for panning and dragging.\n   *\n   * @memberOf GraphComponent\n   */\n  @HostListener('document:mousemove', ['$event'])\n  onMouseMove($event: MouseEvent): void {\n    this.isMouseMoveCalled = true;\n    if ((this.isPanning || this.isMinimapPanning) && this.panningEnabled) {\n      this.panWithConstraints(this.panningAxis, $event);\n    } else if (this.isDragging && this.draggingEnabled) {\n      this.onDrag($event);\n    }\n  }\n\n  @HostListener('document:mousedown', ['$event'])\n  onMouseDown(event: MouseEvent): void {\n    this.isMouseMoveCalled = false;\n  }\n\n  @HostListener('document:click', ['$event'])\n  graphClick(event: MouseEvent): void {\n    if (!this.isMouseMoveCalled) this.clickHandler.emit(event);\n  }\n\n  /**\n   * On touch start event to enable panning.\n   *\n   * @memberOf GraphComponent\n   */\n  onTouchStart(event: any): void {\n    this._touchLastX = event.changedTouches[0].clientX;\n    this._touchLastY = event.changedTouches[0].clientY;\n\n    this.isPanning = true;\n  }\n\n  /**\n   * On touch move event, used for panning.\n   *\n   */\n  @HostListener('document:touchmove', ['$event'])\n  onTouchMove($event: any): void {\n    if (this.isPanning && this.panningEnabled) {\n      const clientX = $event.changedTouches[0].clientX;\n      const clientY = $event.changedTouches[0].clientY;\n      const movementX = clientX - this._touchLastX;\n      const movementY = clientY - this._touchLastY;\n      this._touchLastX = clientX;\n      this._touchLastY = clientY;\n\n      this.pan(movementX, movementY);\n    }\n  }\n\n  /**\n   * On touch end event to disable panning.\n   *\n   * @memberOf GraphComponent\n   */\n  onTouchEnd(event: any) {\n    this.isPanning = false;\n  }\n\n  /**\n   * On mouse up event to disable panning/dragging.\n   *\n   * @memberOf GraphComponent\n   */\n  @HostListener('document:mouseup', ['$event'])\n  onMouseUp(event: MouseEvent): void {\n    this.isDragging = false;\n    this.isPanning = false;\n    this.isMinimapPanning = false;\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDragEnd) {\n      this.layout.onDragEnd(this.draggingNode, event);\n    }\n  }\n\n  /**\n   * On node mouse down to kick off dragging\n   *\n   * @memberOf GraphComponent\n   */\n  onNodeMouseDown(event: MouseEvent, node: any): void {\n    if (!this.draggingEnabled) {\n      return;\n    }\n    this.isDragging = true;\n    this.draggingNode = node;\n\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDragStart) {\n      this.layout.onDragStart(node, event);\n    }\n  }\n\n  /**\n   * On minimap drag mouse down to kick off minimap panning\n   *\n   * @memberOf GraphComponent\n   */\n  onMinimapDragMouseDown(): void {\n    this.isMinimapPanning = true;\n  }\n\n  /**\n   * On minimap pan event. Pans the graph to the clicked position\n   *\n   * @memberOf GraphComponent\n   */\n  onMinimapPanTo(event: MouseEvent): void {\n    let x =\n      event.offsetX - (this.dims.width - (this.graphDims.width + this.minimapOffsetX) / this.minimapScaleCoefficient);\n    let y = event.offsetY + this.minimapOffsetY / this.minimapScaleCoefficient;\n\n    this.panTo(x * this.minimapScaleCoefficient, y * this.minimapScaleCoefficient);\n    this.isMinimapPanning = true;\n  }\n\n  /**\n   * Center the graph in the viewport\n   */\n  center(): void {\n    this.panTo(this.graphDims.width / 2, this.graphDims.height / 2);\n  }\n\n  /**\n   * Zooms to fit the entier graph\n   */\n  zoomToFit(): void {\n    const heightZoom = this.dims.height / this.graphDims.height;\n    const widthZoom = this.dims.width / this.graphDims.width;\n    let zoomLevel = Math.min(heightZoom, widthZoom, 1);\n\n    if (zoomLevel < this.minZoomLevel) {\n      zoomLevel = this.minZoomLevel;\n    }\n\n    if (zoomLevel > this.maxZoomLevel) {\n      zoomLevel = this.maxZoomLevel;\n    }\n\n    if (zoomLevel !== this.zoomLevel) {\n      this.zoomLevel = zoomLevel;\n      this.updateTransform();\n      this.zoomChange.emit(this.zoomLevel);\n    }\n  }\n\n  /**\n   * Pans to the node\n   * @param nodeId\n   */\n  panToNodeId(nodeId: string): void {\n    const node = this.graph.nodes.find(n => n.id === nodeId);\n    if (!node) {\n      return;\n    }\n\n    this.panTo(node.position.x, node.position.y);\n  }\n\n  private panWithConstraints(key: string, event: MouseEvent) {\n    let x = event.movementX;\n    let y = event.movementY;\n    if (this.isMinimapPanning) {\n      x = -this.minimapScaleCoefficient * x * this.zoomLevel;\n      y = -this.minimapScaleCoefficient * y * this.zoomLevel;\n    }\n\n    switch (key) {\n      case PanningAxis.Horizontal:\n        this.pan(x, 0);\n        break;\n      case PanningAxis.Vertical:\n        this.pan(0, y);\n        break;\n      default:\n        this.pan(x, y);\n        break;\n    }\n  }\n\n  private updateMidpointOnEdge(edge: Edge, points: any): void {\n    if (!edge || !points) {\n      return;\n    }\n\n    if (points.length % 2 === 1) {\n      edge.midPoint = points[Math.floor(points.length / 2)];\n    } else {\n      const _first = points[points.length / 2];\n      const _second = points[points.length / 2 - 1];\n      edge.midPoint = {\n        x: (_first.x + _second.x) / 2,\n        y: (_first.y + _second.y) / 2\n      };\n    }\n  }\n}\n","import { Directive, Output, HostListener, EventEmitter } from '@angular/core';\n\n/**\n * Mousewheel directive\n * https://github.com/SodhanaLibrary/angular2-examples/blob/master/app/mouseWheelDirective/mousewheel.directive.ts\n *\n * @export\n */\n// tslint:disable-next-line: directive-selector\n@Directive({ selector: '[mouseWheel]' })\nexport class MouseWheelDirective {\n  @Output()\n  mouseWheelUp = new EventEmitter();\n  @Output()\n  mouseWheelDown = new EventEmitter();\n\n  @HostListener('mousewheel', ['$event'])\n  onMouseWheelChrome(event: any): void {\n    this.mouseWheelFunc(event);\n  }\n\n  @HostListener('DOMMouseScroll', ['$event'])\n  onMouseWheelFirefox(event: any): void {\n    this.mouseWheelFunc(event);\n  }\n\n  @HostListener('wheel', ['$event'])\n  onWheel(event: any): void {\n    this.mouseWheelFunc(event);\n  }\n\n  @HostListener('onmousewheel', ['$event'])\n  onMouseWheelIE(event: any): void {\n    this.mouseWheelFunc(event);\n  }\n\n  mouseWheelFunc(event: any): void {\n    if (window.event) {\n      event = window.event;\n    }\n\n    const delta: number = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail || event.deltaY || event.deltaX));\n    // Firefox don't have native support for wheel event, as a result delta values are reverse\n    const isWheelMouseUp: boolean = event.wheelDelta ? delta > 0 : delta < 0;\n    const isWheelMouseDown: boolean = event.wheelDelta ? delta < 0 : delta > 0;\n    if (isWheelMouseUp) {\n      this.mouseWheelUp.emit(event);\n    } else if (isWheelMouseDown) {\n      this.mouseWheelDown.emit(event);\n    }\n\n    // for IE\n    event.returnValue = false;\n\n    // for Chrome and Firefox\n    if (event.preventDefault) {\n      event.preventDefault();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { GraphComponent } from './graph.component';\nimport { ChartCommonModule } from '@swimlane/ngx-charts';\nimport { MouseWheelDirective } from './mouse-wheel.directive';\nimport { LayoutService } from './layouts/layout.service';\nexport { GraphComponent };\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [GraphComponent, MouseWheelDirective],\n  exports: [GraphComponent, MouseWheelDirective],\n  providers: [LayoutService]\n})\nexport class GraphModule {}\n","import { NgModule } from '@angular/core';\nimport { GraphModule } from './graph/graph.module';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\n\n@NgModule({\n  imports: [NgxChartsModule],\n  exports: [GraphModule]\n})\nexport class NgxGraphModule {}\n"]}